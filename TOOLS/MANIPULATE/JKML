#!/bin/bash -norc
############################################################
## JAKUB KUBECKA 2021                                     ##
## Program that runs ML on pickled databases              ## 
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## Clipping-Machine = Stapler (in Danish Klipsemaskine)   ##
##                                          Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
function help { 
  program_PYTHON $scriptpath/../../JKML/JKML.py -help 
  exit 
}
function help_adv { 
  program_PYTHON $scriptpath/../../JKML/JKML.py -help_adv 
  exit 
}
function help_krr { 
  program_PYTHON $scriptpath/../../JKML/JKML.py -help_krr 
  exit 
}
function help_nn { 
  program_PYTHON $scriptpath/../../JKML/JKML.py -help_nn
  exit 
}
JKloadhelp             # check if user asks for -help
JKloadhelp _adv         # check if user asks for -help
JKloadhelp _krr         # check if user asks for -help
JKloadhelp _nn         # check if user asks for -help

# method 
#JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load charge and multiplicity
#JKloadCHARM

# load amount of molecules
if [ -e $inputfile ]
then
  M=`head -n 1 $inputfile | awk '{print $6}'`
#else
#  JKecho 0 "No ${cfYELLOW}${inputfile}${cfDEF} file. (${cfRED}Assuming M=1 if needed!!!${cfDEF})"
#  M=1;
fi

# -loc or load supercomputer parameters
JKloadsupercomputer

Qarray=1 #submit jobs as array?
Qarraymax=0 #max jobs per array
Qsplit=1 #HOW much is split the K, 1 = no split
Qsplitargument=""

Qspkmd=0
Qlangevin=0
Qnhc=0
Qrpmd=0
md_cutoff=5.0
md_thermostatconstant=100
md_steps=2000
md_timestep=0.1
md_model="model.pkl"
md_what=""
Qqml=0

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  # split
  if [ "$iter" == "-split" ] || [ "$iter" == "-startsplit" ] || [ "$iter" == "-finishsplit" ]
  then
    Qsplitargument="$iter"
    last="-split"
    continue
  fi
  if [ "$last" == "-split" ]
  then
    last=""
    Qsplit=$iter
    continue
  fi
  # Array submission
  if [ "$iter" == "-array" ]
  then
    Qarray=1
    echo "No need to use $iter argument anymore. [Used by default.]"
    continue
  fi
  #Qarraymax
  if [ "$iter" == "-arraymax" ]
  then
    last="-arraymax"
    Qarray=1
    continue
  fi
  if [ "$last" == "-arraymax" ]
  then
    Qarraymax="$iter"
    last=""
    continue
  fi
  #QML
  if [ "$iter" == "-qml" ] || [ "$iter" == "-krr" ]
  then
    Qqml=1
    continue
  fi
  #SPKMD 
  if [ "$iter" == "-spkmd" ]
  then
    Qspkmf=1
    continue
  fi
  #MD STRUCTURE
  if [ "$iter" == "-md_structure" ] || [ "$iter" == "-md" ]
  then
    last="-md_structure"
    continue
  fi
  if [ "$last" == "-md_structure" ]
  then
    md_structure="$iter"
    last=""
    continue
  fi
  #MD CUTOFF
  if [ "$last" == "-md_cutoff" ]
  then
    md_cutoff="$iter"
    last=""
  fi
  if [ "$iter" == "-md_cutoff" ] || [ "$iter" == "-cutoff" ] || [ "$iter" == "-nn_cutoff" ] 
  then
    last="-md_cutoff"
  fi
  #MD STEPS
  if [ "$iter" == "-md_steps" ] 
  then
    last="-md_steps"
    continue
  fi
  if [ "$last" == "-md_steps" ]
  then
    md_steps="$iter"
    last=""
    continue
  fi
  #MD TIME STEP
  if [ "$iter" == "-md_timestep" ] 
  then
    last="-md_timestep"
    continue
  fi
  if [ "$last" == "-md_timestep" ]
  then
    md_timestep="$iter"
    last=""
    continue
  fi
  #MD md_thermostatconstant
  if [ "$iter" == "-md_thermostatconstant" ] 
  then
    last="-md_thermostatconstant"
    continue
  fi
  if [ "$last" == "-md_thermostatconstant" ]
  then
    md_thermostatconstant="$iter"
    last=""
    continue
  fi
  #MD MODEL
  if [ "$iter" == "-md_model" ]
  then
    last="-md_model"
    continue
  fi
  if [ "$last" == "-md_model" ]
  then
    md_model="$iter"
    last=""
    continue
  fi
  #MD RPMD
  if [ "$iter" == "-rpmd" ]
  then
    last="-rpmd"
    continue
  fi
  if [ "$last" == "-rpmd" ]
  then
    rpmd="$iter"
    Qspkmd=1
    last=""
    continue
  fi
  #MD Langevin
  if [ "$iter" == "-langevin" ]
  then
    Qlangevin=1
    Qspkmd=1
    continue
  fi
  #MD Langevin
  if [ "$iter" == "-nhc" ]
  then
    Qnhc=1
    Qspkmd=1
    continue
  fi
  #SPKMD extra
  if [ "$iter" == "-spkmd_extra" ]
  then
    last="-spkmd_extra"    
    continue
  fi
  if [ "$last" == "-spkmd_extra" ]
  then
    md_what+="$iter"
    Qspkmd=1
    last=""
    continue
  fi
  if [ "$iter" == "-nw" ]
  then
    echo "JKML: -nw is not used anymore. 1 worker or <-cpu> workers is used by default."
    last="-nw"
    continue
  fi
  if [ "$last" == "-nw" ]
  then
    last=""
    continue
  fi
  if [ "$iter" == "-physnet" ]
  then
    if [ -e input.inp ]
    then
      echo "JKML: THE OLD input.inp FILE IS USED INSTEAD OF ANY NEW COMMANDS!!!"
    fi
  fi
  arguments_help+=( "${arguments[i]}" )
done
arguments=("${arguments_help[@]}")
therest=${arguments[@]}

# print inserted command
echoCOMMAND COMMAND: JKML "$@" >> output
if [ "$METHODsupercomputer" == "loc" ]
then
  loc=" -loc"
  Qarray=0
else
  loc=""
fi
if [ $Qqml -eq 1 ] && [ "$SCpar" == "qtest" ]
then
  echo "JKML WARNING: QML does not work on qtest partition for some reason!"
  exit
fi
if [ $Qsplit -gt 1 ]
then
  addsplit0=" $Qsplitargument $Qsplit "
fi
addsplit=""
calc=0
SCtasks=`echo "($Qsplit*$Qsplit+$Qsplit)/2" | bc`
if [ "$Qsplitargument" == "-finishsplit" ]
then 
  SCtasks=1
fi
if [ $SCtasks -eq 1 ]
then
  Qarray=0
fi
#TODO this must go inside
for i in `seq 1 $Qsplit`
do
  for j in `seq 1 $i`
  do
    if [ $Qsplit -gt 1 ]
    then
      if [ "$Qsplitargument" == "-finishsplit" ]
      then
        if [ $j -ne $Qsplit ] || [ $i -ne $Qsplit ]
        then
          continue
        fi
      fi
      addsplit="$addsplit0 $i $j"
    fi
    if [ $Qarray -eq 1 ]
    then
      calc=`echo $calc+1 | bc`
      #TODO it will not work for more structures!!!!
      if [ $Qspkmd -eq 1 ]
      then
        echo "source ~/.JKCSusersetup.txt$loc;program_PYTHON -V >/dev/null; spkmd simulation_dir=SIM system.molecule_file=0sa10w-05_05.xyz calculator.model_file=model.pkl calculator.neighbor_list.cutoff=5.0 device=cpu dynamics.n_steps=200 dynamics/integrator=rpmd system.n_replicas=4 $therest" > .run$calc
      else
        echo "source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../../JKML/JKML.py $therest $addsplit -nw $SCcpu" > .run$calc
      fi
      if [ $calc -eq $SCtasks ] 
      then
        if [ $Qarraymax -gt 0 ]
        then
          arraymax="%$Qarraymax"
        else
          arraymax=""
        fi
        SC_command=`echo $SC_command | sed "s/sbatch/sbatch --array=1-$SCtasks$arraymax/"`
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" >> output
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" > .run
        job=$(/bin/bash .run)
        if [ ! -z "$job" ] ;then echo $job;fi
        echo $job | awk '{print $4}'  >> .jobs.txt 
      fi
    else
      if [ $Qspkmd -eq 1 ]
      then
        md_folder="SIM"
        md_device="cpu"
        if [ $Qrpmd -gt 0 ]
        then
          md_what+=" dynamics/integrator=rpmd system.n_replicas=4 "
        fi
        if [ $Qlangevin -gt 0 ]
        then
          md_what+=" +dynamics/thermostat=langevin dynamics.integrator.time_step=$md_timestep dynamics.thermostat.time_constant=$md_thermostatconstant "
        fi
        if [ $Qnhc -gt 0 ]
        then
          md_what+=" +dynamic/thermostat=nhc dynamics.integrator.time_step=$md_timestep "
        fi
        if [ -e "$md_folder/checkpoint.chk" ]
        then
          md_what+=" system.load_system_state=$md_folder/checkpoint.chk restart=$md_folder/checkpoint.chk "
        fi
        #md_rpmd/md_langevin/md_verlet"
        cp $toolspath/SCRIPTS/JKMD.py .
        echo "$SC_command \"source ~/.JKCSusersetup.txt$loc;export PYTHONPATH=\"\";export PYTHONIOENCODING=utf-8;program_PYTHON -V >/dev/null; spkmd simulation_dir=$md_folder system.molecule_file=$md_structure calculator.model_file=$md_model calculator.neighbor_list.cutoff=$md_cutoff calculator.energy_unit=eV device=$md_device dynamics.n_steps=$md_steps $md_what \"" >> output
        echo "$SC_command \"source ~/.JKCSusersetup.txt$loc;export PYTHONPATH=\"\";export PYTHONIOENCODING=utf-8;program_PYTHON -V >/dev/null; time spkmd simulation_dir=$md_folder system.molecule_file=$md_structure calculator.model_file=$md_model calculator.neighbor_list.cutoff=$md_cutoff calculator.energy_unit=eV device=$md_device dynamics.n_steps=$md_steps $md_what \"" > .run
      else 
        echo  "$SC_command \"source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../../JKML/JKML.py $therest $addsplit -nw $SCcpu -dir $PWD -time $SCtime\"" >> output
        echo  "$SC_command \"source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../../JKML/JKML.py $therest $addsplit -nw $SCcpu -dir $PWD -time $SCtime\"" > .run
      fi

      if [ $METHODsupercomputer == "loc" ]
      then
        /bin/bash .run | tee -a output
      else
        job=$(/bin/bash .run)
        if [ ! -z "$job" ] ;then echo $job;fi
        echo $job | awk '{print $4}'  >> .jobs.txt
      fi
    fi
  done
done


echo "JKML: Calculations submitted or calculations done (-loc)."
exit

