#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## collect data from JKCS subfolders                      ##
## To understand program run help:                        ##
##        -- no help, just internal setup --              ##
############################################################
## "No, sorry, 2 different things can't be equal."        ##
##                                          Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

## 1) UNIQUENESS
## 2) CONTROL
## 3) RUN

# load status
stat=$1     # CONTROL or RUN

if [ "$stat" == "UNIQUENESS" ]
then
  savefile=$2
  resultfile=$3
  movie=$4
  Qs=$5
  #UNIQUENNESS  
  args=${@:6}  # all arguments except the first 5
  
  # remove if for whatever reason exist these files
  if [ -e .help1_$resultfile ]; then rm .help1_$resultfile; fi
  if [ -e .help2_$resultfile ]; then rm .help2_$resultfile; fi

  COMMAND="grep -v '\-----------' $savefile | sed '/^[ \t]*$/d' | awk "
  COMMANDp="'{printf(\"%s"
  COMMANDv="\n\"),\$1"
  COMMANDs=" | sort -u"
  column=1 #not filtering this one
  for i in $args
  do
    column=`echo $column+1 | bc`
    if [ "$i" != "-1" ]
    then
      COMMAND+=" -v var${column}=$i"
      COMMANDp+=" %.*f"
      COMMANDv+=",\$var${column},\$${column}"
      COMMANDs+=" -k $column"
    else
      COMMANDp+=" %s"
      COMMANDv+=",\$${column}"
    fi
  done
  COMMAND+=" $COMMANDp""$COMMANDv""}'""$COMMANDs"" > .help1_$resultfile" 
  #echo $COMMAND 
  eval $COMMAND
  
  # GREPING WHOLE LINES
  lines=`wc -l .help1_$resultfile | awk '{print $1}'`
  for i in `seq 1 $lines`
  do
    text=`head -n $i .help1_$resultfile | tail -n 1 | awk '{print $1}'`
    grep $text $savefile >> .help2_$resultfile
  done
  echo "UNIQUENESS: $resultfile - $lines files ( sort= $Qs, uniq= $args )" 
  echo "UNIQUENESS: $resultfile - $lines files ( sort= $Qs, uniq= $args )" >> output
  
  # SORTING
  if [ -e .help2_$resultfile ] 
  then
    if [ $Qs -gt 0 ]
    then
      cat .help2_$resultfile | sort -nk $Qs > $resultfile
    else
      cat .help2_$resultfile > $resultfile
      echo "No sorting."
    fi
  else
    if [ -e $resultfile ];then rm $resultfile; fi; touch $resultfile
    echo "OJOJOJ: no files have passed :-(  ... I guess something is wrong"
  fi
  
  # MOVIE
  if [ -e $movie ]; then rm $movie; fi
  o=`cat $resultfile | awk '{print $1}'`;
  for i in $o;
  do
   cat ${i%.*}.xyz >> $movie
  done
  
  # REMOVE
  if [ -e .help1_$resultfile ]; then rm .help1_$resultfile; fi
  if [ -e .help2_$resultfile ]; then rm .help2_$resultfile; fi
fi

#################################################################################
# CONTROL status
if [ "$stat" == "CONTROL" ] 
then
  savefile=$2
  #I DO NOT NEED THE GUYS BELOW THEY GO TO UNIQUENESS
  resultfile=$3                                    ##
  movie=$4                                         ##
  Qs=$5                                            ## 
  #UNIQUENNESS                                     ##
  args=${@:6}  # all arguments except the first 5  ##
  ###################################################
  
  ## for savefile
  if [ -e $savefile ]; then rm $savefile; fi
  if [ -e .help$savefile ]; then rm .help$savefile; fi
  touch .help$savefile
  cat */$savefile     >> .help$savefile 2>/dev/null
  cat */*/$savefile   >> .help$savefile 2>/dev/null
  cat */*/*/$savefile >> .help$savefile 2>/dev/null
  cat .help$savefile | column -t > $savefile
  rm .help$savefile

  #echo "TEST after savefile"
  ## are there 4 columns??
  #test4=0
  #test4c=`head -n 1 $savefile | awk '{print $4}'`
  #if [ ! -z "$test4c" ]; then test4=1; fi
  
  ### SORTING
  #u1=2
  #u2=3
  #u3=-1
  #SORT=3
  #if [ $Qncc -gt 0 ]
  #then
  #  u3=3
  #fi
  #if [ $Qncc -eq 2 ]
  #then
  #  u3=1
  #fi 
  #if [ $Qncc -eq 3 ] || [ $Qncc -eq 4 ]
  #then
  #  SORT=4
  #  u3=3
  #fi

  # send for uniqueness
  $scriptpath/$scriptfile "UNIQUENESS" ${@:2}
fi

###########################################################################
###  RUN in all directories                                             ###
###########################################################################
#PLAN
#1) create XYZ
#2) grep energy to XYZ
#3) calculate Rg
if [ "$stat" == "RUN" ]
then
  savefile=$2
  args="${@:3}"  # all arguments except the first 2

  #check XYZ ... MAYBE NOT NECESSARY = NOT INCLUDED, IF THEY ARE EMPTY
  files=""
  for i in `ls *.xyz`
  do
    file=$i
    info=`wc -c $file | awk '{print $1}'`
    if [ $info -ge 24 ]
    then
      fileLOG=$(basename $file .xyz).log
      fileOUT=$(basename $file .xyz).out
      if [ -e $fileLOG ]
      then
        file=$fileLOG
      elif [ -e $fileOUT ]
      then
        file=$fileOUT
      fi
      files+=" $file"
    fi
  done
  
  #if old savefile exist, remove it
  if [ -e $savefile ]; then rm $savefile; fi
  $toolspath/MANIPULATE/JKgaussstat "${@:3}" $files >> $savefile
fi


