#!/bin/bash
##########################################################################################
############################## USER SETUP ################################################
##########################################################################################

# CONTENT:
# USER SETUP
#   - Output style setup
#   - Paths declaration
#   - Default supercomputer setup
# ADVANCED USER SETUP
#   - program_ABC
#   - program_XTB
#   - program_G16
#   - program_PYTHON2 & program_PYTHON3
#   - program_GoodVibes
#   - SBATCHuseradd

##########################
### Output style setup ###			
##########################

# Do you want colorful output? [1/0]
Qcolours=1
# Do you want the program symbol? [1/0]
Qsymbol=1

#########################
### Paths declaration ###
#########################

PATH_ABCluster="/wrk/kubeckaj/DONOTREMOVE/Apps/ABCluster-2.0-Linux/rigidmol-optimizer"
PATH_XTB="/wrk/kubeckaj/DONOTREMOVE/Apps/XTB6.0/"
PATH_GoodVibes="/wrk/kubeckaj/Desktop/Ph.D./COLL/goodvibes/goodvibes/GoodVibes.py"
PATH_ORCA="/wrk/kubeckaj/DONOTREMOVE/Apps/ORCA/orca_4_0_1_2_linux_x86-64_openmpi202/orca"

###################################
### Default supercomputer setup ###
###################################

function echo_SCpartition {
  echo """######################################################
## MAXTASKS CPU NODES REQ.TIME  PARTITION MEMPERCPU ##
======================================================
ABC  NoC     1    1   72:00:00   serial     4000
XTB  NoC     1    1   72:00:00   serial     4000
DFT  100     8    1   72:00:00   serial     4000
CC   100     8    1   330:00:00  longrun    4000
-loc 1       1    1   -          -          -
======================================================"""
}

##########################################################################################
########################## ADVANCED USER SETUP ###########################################
##########################################################################################

##########################################################################################
# ABCluster script paths: rigidmol-optimizer 
# abcluster uses OpenMP. Use all available CPU, unless OMP_NUM_THREADS is specified.
##########################################################################################
function program_ABC {
  input=$1                             # $name.inp
  output=$(basename $input .inp).out   # $name.out
 
  #path to the script
  rigidmoloptimizer=$PATH_ABCluster
 
  #performing the calculation 
  module load gcc/8.2.0 2>/dev/null 
  $rigidmoloptimizer $input > $output 
}
##########################################################################################
##########################################################################################
# GNF2-xTB script: xtb
# xtb uses OMP parallelization. Use all available CPU, unless OMP_NUM_THREADS is specified.
##########################################################################################
function program_XTB {
  input=$1                     # file.xyz    
  base=$(basename $input .xyz) # file
  output=$base.log             # file.log
  args=${@:2}                  # all arguments except the first one

  export XTBHOME=$PATH_XTB
  export PATH=$PATH:${XTBHOME}/bin:${XTBHOME}/scripts
  
  #CREATING WORKING DIRECTORY
  if [ ! -d $WRKDIR/TMP ]; then mkdir $WRKDIR/TMP; fi
  ADD=""
  test=0
  while [ $test -eq 0 ]
  do
    CALC_NAME=$WRKDIR/TMP/XTB${SLURM_JOBID}${ADD}
    if [ -d $CALC_NAME ]; then ADD="_${RANDOM}"
    else test=1;fi     
  done
 
  #ENTERING TO WORKING DIRECTORY AND PERFORMING CALCULATION
  DIR=$PWD
  mkdir $CALC_NAME
  cp $input $CALC_NAME
  cd $CALC_NAME
  $XTBHOME/bin/xtb $input $method $args > $output 2>$output

  #COPYING RESULTS BACK
  cp $output $DIR/
  if [ -e $base.xyz ]
  then
   cp $base.xyz $DIR/$base.xyz
  else
   cp $input $DIR/$base.xyz
  fi

  #CLEANING
  cd $DIR
  rm -rf $CALC_NAME
}
##########################################################################################
##########################################################################################
# G16 script: gaussian
# loadinng gaussian licence might be required
##########################################################################################
function program_G16 {
  input=$1                     # file.xyz    
  base=$(basename $input .xyz) # file
  inputCOM=$base.com
  output=$base.log             # file.log
  args=${@:2}                  # all arguments except the first one

  export g16root=/appl/chem/G16RevA.03
  source $g16root/g16/bsd/g16.login
  export OMP_NUM_THREADS=1
 
  #CREATING WORKING DIRECTORY
  if [ ! -d $WRKDIR/TMP ]; then mkdir $WRKDIR/TMP; fi
  ADD=""
  test=0
  while [ $test -eq 0 ]
  do
    CALC_NAME=$WRKDIR/TMP/G16${SLURM_JOBID}${ADD}
    if [ -d $CALC_NAME ]; then ADD="_${RANDOM}"
    else test=1;fi
  done

  #ENTERING TO WORKING DIRECTORY AND PERFORMING CALCULATION
  DIR=$PWD
  mkdir $CALC_NAME
  
  JKxyz2com $input -method $method -mem $MEMinsert -cpu $SCcpu -char $CHARGE -mult $MULTIPLICITY  $args
  exit
  srun g16 < $inputCOM >& $output
  JKlog2xyz $output

  #COPYING RESULTS BACK
  cp $output $DIR/
  cp *.xyz $DIR/

  #CLEANING
  rm -rf $CALC_NAME
}
##########################################################################################
##########################################################################################
# ORCA script: orca
# 
##########################################################################################
function program_ORCA {
  input=$1                     # file.xyz    
  base=$(basename $input .xyz) # file
  inputINP=$base.inp
  output=$base.out             # file.out
  args=${@:2}                  # all arguments except the first one

  export OMP_NUM_THREADS=1 
  module load orca-env/4.0.1.2

  #CREATING WORKING DIRECTORY
  if [ ! -d $WRKDIR/TMP ]; then mkdir $WRKDIR/TMP; fi
  ADD=""
  test=0
  while [ $test -eq 0 ]
  do
    CALC_NAME=$WRKDIR/TMP/ORCA${SLURM_JOBID}${ADD}
    if [ -d $CALC_NAME ]; then ADD="_${RANDOM}"
    else test=1;fi
  done

  #ENTERING TO WORKING DIRECTORY AND PERFORMING CALCULATION
  DIR=$PWD
  mkdir $CALC_NAME

  MEMinsert=`echo 0.85*$mem | sed 's/mb//' | sed 's/gb/*1000/' |Â bc`
  JKxyz2inp $input -method $method -mem $MEMinsert -cpu $SCcpu -char $CHARGE -mult $MULTIPLICITY  $args
  rm *.job
  $PATH_ORCA $inputINP > $output
  #JKout2xyz $output

  #COPYING RESULTS BACK
  cp $output $DIR/
  cp *.xyz $DIR/

  #CLEANING
  rm -rf $CALC_NAME
}
##########################################################################################
##########################################################################################
# Python
##########################################################################################
#use python2.X, numpy might be required (needed by JKCS1)
function program_PYTHON2 {
  python2.6 ${@}
}
#use python3.X (needed by GoodVibes)
function program_PYTHON3 {
  python3.6 ${@}
}
##########################################################################################
# GoodVibes
# require python3.x
##########################################################################################
function program_GoodVibes {
  program_PYTHON3 $PATH_GoodVibes ${@}
}
##########################################################################################
##########################################################################################
# sbatch
# command: sbatch [some_parameters] $SBATCHuseradd script
##########################################################################################
SBATCHuseradd=""
##########################################################################################
