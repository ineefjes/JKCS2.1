#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## This program start the ABCluster bussiness             ##
## To adjust program just change setup                    ##
##       for help use arguement -help                     ##
############################################################
## "If I should show 1 equation, it would be:exp(iPi)-1=0 ##
## Contains all magic numbers (0,1,-1,Pi,i)."Jakub Kubecka##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP
function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "This script explores PESes of clusters using ABC algorithm.\n"
  printf """
  $scriptfile ${cfCYAN}[OPTIONS(s)]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
    -help ............. print this help and exit
    -l,-lm \"X\" ........ X local minima will saved [def=300*M/NoC]
    -g,-gen \"X\" ....... amount of ABC generations [def=100]
    -s,-sc \"X\" ........ amount of scout bees      [def=4]
    -pop,-i,-init \"X\" . amount of initial guesses [def=300*M]
 
    OTHERS: -box [def=7+M]
    OTHERS: -wtb,-walltimebased {1000s,3h,1d ...}      [TESTING]
    OTHERS: -wtc,-walltimecontrolled {1000s,3h,1d ...} [TESTING]
 
  ${cfMAGENTA}SYMBOLS:${cfDEF}
    M .... number of molecules
    NoC .. number of combinations to form cluster
    use * or / or M or NoC and script will evaluate it

  ${cfMAGENTA}EXAMPLES:${cfDEF}
    
    ${cfRED}WRONG exploration (BAD = DO NOT USE):${cfDEF}
            $scriptfile -pop 100 -lm 100 -gen 1     #too short (gen>=100)
            $scriptfile -pop 1000 -gen 100 -lm 1    #few saved structures
            $scriptfile -pop 100 -gen 100 -lm 300   #too small population

    ${cfGREEN}Correct exploration:${cfDEF}
            $scriptfile -pop 1000 -gen 100 -lm 3000
            $scriptfile -pop 1000*M -gen 100 -lm 4000/NoC
            $scriptfile -wtc 3h -pop 2000*M/NoC\n""" 
  printf "#################################################################\n"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# method and folder name
folderNEW=ABC
program=ABC        # could be also DFT, XTB, DLPNO ...

# load amount of molecules
M=`head -n 1 $inputfile | awk '{print $6}'`

# -loc or load supercomputer parameters
JKloadsupercomputer

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script

# initial setup of parameters
LM="300*M/NoC"
GEN=100
INIT="300*M"
SC=4
BOX="7+M"

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  # read argument of parameter
  if [ "$last" == "-l" ];    then next=0; last=""; LM="$iter";   continue; fi
  if [ "$last" == "-g" ];    then next=0; last=""; GEN="$iter";  continue; fi
  if [ "$last" == "-i" ];    then next=0; last=""; INIT="$iter"; continue; fi
  if [ "$last" == "-s" ];    then next=0; last=""; SC="$iter";   continue; fi
  if [ "$last" == "-box" ];  then next=0; last=""; BOX="$iter";  continue; fi
  # read paramter name
  if [ "$iter" == "-l" ] || [ "$iter" == "-lm" ]   || [ "$iter" == "-LM" ];   then last="-l";  continue;fi
  if [ "$iter" == "-g" ] || [ "$iter" == "-gen" ]  || [ "$iter" == "-GEN" ];  then last="-g";  continue;fi
  if [ "$iter" == "-pop" ] || [ "$iter" == "-i" ] || [ "$iter" == "-init" ] || [ "$iter" == "-INIT" ]; then last="-i";  continue;fi
  if [ "$iter" == "-s" ] || [ "$iter" == "-sc" ]   || [ "$iter" == "-SC" ];   then last="-s";  continue;fi
  if [ "$iter" == "-box" ];                                                   then last="-box";continue;fi
  # -walltimebased
  if [ "$iter" == "-walltimebased" ] || [ "$iter" == "-wtb" ]
  then
    last="-walltimebased"
    continue
  fi
  if [ "$last" == "-walltimebased" ];
  then
    last=""
    time=`echo $iter | sed "s/s//" | sed "s/m/*60/" | sed "s/h/*60*60/" | sed "s/d/*24*60*60/"`
    # [sec/job] = [time (h)]*[3600 (s/h)]/{CPU}/NoC
    # Exp. (gen=100,sc=4):
    #   [sec/job] = 0.2*M*M*M*M*[POP]
    #   [INIT] = [POP] = [time (h)]*[3600 (s/h)]/{CPU}/NoC/0.02/M/M/M/M
    #TODO CPU not included
    GEN=100
    INIT="$time/NoC/0.0012/M/M/M/M"
    continue
  fi
  # -walltimecontrolled
  if [ "$iter" == "-walltimecontrolled" ] || [ "$iter" == "-wtc" ]
  then
    last="-walltimecontrolled"
    continue
  fi
  if [ "$last" == "-walltimecontrolled" ];
  then
    last=""
    time=`echo $iter | sed "s/s//" | sed "s/m/*60/" | sed "s/h/*60*60/" | sed "s/d/*24*60*60/"`
    # [sec/job] = [time (h)]*[3600 (s/h)]/{CPU}/NoC
    # Exp. (gen=100,sc=4):
    #   [sec/job] = 0.2*M*M*M*M*[POP]
    #   [INIT] = [POP] = [time (h)]*[3600 (s/h)]/{CPU}/NoC/0.02/M/M/M/M
    #TODO CPU not included
    GENcheck=`echo $GEN   | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
    GENcheck=`echo "($GENcheck+0.5)/1" | bc`
    if [ $GENcheck -gt 100 ]; then GEN=100; fi
    INITinp=`echo "$time/NoC/0.0012/M/M/M/M" | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
    INITinp=`echo "($INITinp+0.5)/1" | bc`
    INITcheck=`echo $INIT | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
    INITcheck=`echo "($INITcheck+0.5)/1" | bc`
    if [ $INITcheck -gt $INITinp ]; then INIT="$time/NoC/0.0012/M/M/M/M"; fi
    continue
  fi
  # 
  arguments_help+=( "${arguments[i]}" )
done
arguments=("${arguments_help[@]}")

LM=`echo $LM     | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
LM=`echo "($LM+0.5)/1" | bc`
GEN=`echo $GEN   | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
GEN=`echo "($GEN+0.5)/1" | bc`
INIT=`echo $INIT | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
INIT=`echo "($INIT+0.5)/1" | bc`
SC=`echo $SC     | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
SC=`echo "($SC+0.5)/1" | bc`
BOX=`echo $BOX   | sed "s/M/$M/g" | sed "s/NoC/$NoC/g" | bc -l`
BOX=`echo "($BOX+0.5)/1" | bc`
#CORRECT IF THERE IS JUST 1 MOLECULE:
if [ $M -eq 1 ]
then
  LM=1
  GEN=1
  INIT=1
fi

JKecho 1 "ABCluster parameters set: LM(${cfGREEN}$LM${cfDEF}),GEN(${cfGREEN}$GEN${cfDEF}),INIT(${cfGREEN}$INIT${cfDEF}),SC(${cfGREEN}$SC${cfDEF}),BOX(${cfGREEN}$BOX${cfDEF})."

# there should not be more arguments
therest="${arguments[@]}"
if [ ! -z "$therest" ]
then 
  JKecho 0 "Some argument(s) is/are not understood: ${therest}. [${cfRED}EXITING${cfDEF}]"
  exit
fi

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

# load files and checking their existence
Nfiles=`grep "FILES =" $inputfile | awk '{print $3}'`
JKecho 2 "Number of files read: $Nfiles"
NfilesSTART=`grep -n "# name | q | path" $inputfile | sed 's/:/ /' | awk '{print $1}'`
NfilesEND=`echo $NfilesSTART+$Nfiles | bc`
JKecho 3 "Starting positions of files found: $NfilesSTART (+1)"
JKecho 3 "Starting positions of files found: $NfilesEND"
files=`head -n $NfilesEND $inputfile | tail -n ${Nfiles} | awk '{print $3}' | xargs`
for i in $files
do
  if [ ! -e $i ]
  then
    JKecho 0 "File $i saved in $userinput does not exist. Please, check its path! ${cfRED}[EXITING]${cfDEF}]"
    exit
  fi
done
JKecho 3 "Files loaded: $files"
constitutions=`tail -n 1 $inputfile`
JKecho 2 "Combinations read: ${cfYELLOW}$constitutions${cfDEF}"
# if no combination exist, then end
count=`Felements $constitutions`
if [ $count -eq 0 ]; 
then
  JKecho 1 "No combination exist. [LEAVING]"
  exit
fi

### Going through all combinations

# creating ABC. if it exist, I will just enter it
if [ ! -d ABC ]; then mkdir ABC; fi
cd ABC 
JKecho 2 "Creating ABC subfolders."
#TODO here is the question: should be done in the jobs itself 
const_iter=0
for i in $constitutions
do
  const_iter=`echo $const_iter+1 |bc`
  JKecho 3 "  Combination - ${cfYELLOW}$i${cfDEF}"
  #####################
  ### CREATING PATH ###
  folder=ABC_$i
  ## 
  if [ -d $folder ]; 
  then 
    JKecho 1 "    ${cfGREEN}$folder${cfDEF} already exist"; 
    continue
  fi
  mkdir $folder
  cd $folder
  ######################
  ### CREATE name.CLUSTER
  echo $Nfiles >> $F1
  for var in `seq 1 $Nfiles`
  do
    num=`echo $i | sed -e 's/_/ /g' | awk -v var0=$var '{print $var0}'`
    path=`echo $files | awk -v var0=$var '{print $var0}'` 
    echo $path $num >> $F1
  done
  echo "* $BOX" >> $F1
  JKecho 3 "    File $F1 has been created." 
  ######################
  ### CREATE name.INP
  echo """$F1 #_file_containing_monomers 
$INIT #_initial_amount_of_random_configurations
$GEN #_ammount_of_generations_(loops)
$SC #_amount_of_scout_bees_(survival_value)
$BOX #_size_of_sampling_box
$name #_name_of_output_folder
$LM #_amount_of_Local_Minima_to_be_saved""" | column -t >> $F2
  ######################
  ### CREATE rename.sh
  echo """cd $name-LM
rm *.gjf *.cluster 2>/dev/null
for i in \`ls *.xyz\`
do
  mv \$i ${const_iter}_\$i 
done
cd ..""" > rename.sh
  ######################
  # command
  command="source ~/.JKCSusersetup.txt;\n program_ABC ${name}.inp;\n sh rename.sh" 
  printf "$command" > run${scriptfilecommand}.sh
  commandTODO="cd $PWD; sh run${scriptfilecommand}.sh;"
  echo $commandTODO >> ../commands_TODO.txt
  JKecho 3 "    Command $commandTODO [$command] written to ABC/commands_TODO.txt"
  cd ..
done
JKecho 2 "ABC subfolders created."

### Sending jobs ###
jobscount=`wc -l commands_TODO.txt | awk '{print $1}'` 
JKecho 2 "Counting amount of jobs: $jobscount"
if [ $jobscount -lt $SCtasks ]
then
  SCtasks=$jobcount
fi
JKecho 2 "Tasks used: $SCtasks"

Qlinking=0
if [ $Qlinking -eq 1 ]
then
  echo "LINK 1 $currentdirpath" >> commands_TODO.txt
  if [ -e ../commands_TODO.txt ]
  then 
    cp ../commands_TODO.txt ../commands_TODO.txt_help
    echo "LINK 1 $currentdirpath/ABC" > ../commands_TODO.txt
    cat ../commands_TODO.txt_help >> ../commands_TODO.txt
    rm ../commands_TODO.txt_help
  else
    echo "LINK 1 $currentdirpath/ABC" > ../commands_TODO.txt
  fi
fi

for i in `seq 1 $SCtasks`
do
  #echo "sendjob $currentdir-ABC" 
  $SC_command sh $toolspath/SCRIPTS/JKperform.sh
  #echo "$SC_command"
done

cd ..

