#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that runs DFT out of another folder            ## 
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "Today I have pain in my back ... that is all."        ##
##                                          Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

# print inserted command
echoCOMMAND COMMAND: $scriptfile "$@" >> output

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP
function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "Program for running 3rd party calculations\n"
  printf """
  $scriptfile ${cfCYAN}[OPTIONS(s)]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ................ print this help
   -nf,-newfolder \"X\" ... name of the new folder [def=XTB]
   -of,-oldfolder \"X\" ... name of the olf folder containing XYZs [def=ABC]
   -rf,-resultsfile \"X\" . uses 1. column of results\"X\"{_FILTERED}.dat
   -m,-method \"X\" ....... method used by 3rd party quantum program
   -p,-program \"X\" ...... 3rd party quantum program 
                          (it has to be described in ~/.JKCSusersetup.txt)
     OTHERS: -bs,-add,-addbase \"ATOM\", (-greasy,-con X = cores on node) 
             -array = does submit array instead of single jobs
             -arraymax X = max jobs per array
  
  ${cfMAGENTA}EXAMPLES:${cfDEF}

   ${cfYELLOW}XTB:${cfDEF}
     $scriptfile    
     $scriptfile -p XTB -of ABC -m \"--opt --gfn 2\" 
     $scriptfile -p XTB -nf XTB_freq -rf XTB -m \"-ohess -temp 298.15\"
   ${cfYELLOW}G16:${cfDEF}
     $scriptfile -p G16 -rf ABC     -nf PM6      -m \"# PM6 opt=(calcall,verytight)  freq\"
     $scriptfile -p G16 -rf XTB     -nf DFT_sp   -m \"# wb97xd 6-31++g**\"
     $scriptfile -p G16 -rf XTB     -nf DFT_opt  -m \"# wb97xd 6-31++g** opt=verytight\"
     $scriptfile -p G16 -rf DFT_opt -nf DFT_freq -m \"# wb97xd 6-31++g** freq Temperature=298.15\"
   ${cfYELLOW}ORCA:${cfDEF}
     $scriptfile -p ORCA -rf XTB -nf OPT -m \"! PBE0 def2-TZVP TIGHTSCF Opt D3BJ\"
   ${cfYELLOW}ADVANCED:${cfDEF}
     $scriptfile -p G16 -rf XTB -nf DFT -bc I -m \"#wb97xd GEN Pseudo=Read Opt Int=UltraFine Freq MaxDisk=32GB\" -mem 12GB -cpu 16
     $scriptfile -p ORCA -rf paths.txt -nf DLPNO -m \"! aug-cc-pVTZ aug-cc-pVTZ/C DLPNO-CCSD(T) TightSCF RI-JK aug-cc-pVTZ/JK\" -maxtasks 100 -cpu 8 -par q24,q28,q36,q40,q48,q64 -time 10-00:00:00 
     $scriptfile -p ORCA -rf XTB -nf DFT -add I -m \"! aug-cc-pVTZ wB97X-D3BJ OPT FREQ\" -cpu 4 -mem 8000
"""
  printf "#################################################################\n"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# method 
JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load charge and multiplicity
JKloadCHARM

# load amount of molecules
if [ -e $inputfile ]
then
  M=`head -n 1 $inputfile | awk '{print $6}'`
else
  JKecho 0 "No ${cfYELLOW}${inputfile}${cfDEF} file. (${cfRED}Assuming M=1 if needed!!!${cfDEF})"
  M=1;
fi

# -loc or load supercomputer parameters
JKloadsupercomputer

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script

#new folder name
folderNEW=$program

#old folder name
folderOLD="ABC"

# are we taking from some file or from some folder?
QfromfolderOLD=1
# just testing user input for -rf and -of
Qtestboth=0

Qpickle=0 #Do I want to unpickle and pickle in the end?

#how many times repeat in case of fail
#TODO REPEAT=0

### METHOD 
method="--opt vtight"
addbase="" #add base or some extraline?

Qjpt=1 #jobs per task
Qarray=1 #submit jobs as array?
Qarraymax=0 #max jobs per array

#for GREASY:
cores_in_node=40

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  ## repeat
  #if [ "$last" == '-repeat' ]
  #then
  #  REPEAT="$i"
  #  last=''
  #  next=0
  #  continue
  #fi
  #if [ "$i" == "-repeat" ]
  #then
  #  last='-repeat'
  #  next=1
  #  continue
  #fi
  # addbase or ea
  if [ "$last" == "maxiter" ]
  then
    last=''
    next=0
    addbase+=" $iter"
    continue
  fi
  if [ "$last" == '-add' ]
  then
    addbase+=" -add $iter"
    if [ "$iter" == "maxiter" ] 
    then
      last='maxiter'
    else
      last=''
      next=0
    fi
    continue
  fi
  if [ "$iter" == "-addbase" ] || [ "$iter" == "-add" ] || [ "$iter" == "-bs" ] || [ "$iter" == "-ea" ]
  then
    last='-add'
    next=1
    continue
  fi
  ### -newfolder "X"
  if [ "$last" == "-nf" ]
  then
    folderNEW="$iter"
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-newfolder" ] || [ "$iter" == "-nf" ]
  then
    next=1
    last="-nf"
    continue
  fi
  #Qarraymax
  if [ "$iter" == "-arraymax" ]
  then
    last="-arraymax"
    Qarray=1
    continue
  fi
  if [ "$last" == "-arraymax" ]
  then
    Qarraymax="$iter" 
    last=""
    continue
  fi
  ### -oldfolder "X"
  if [ "$last" == "-of" ]
  then
    folderOLD="$iter"
    QfromfolderOLD=1
    Qtestboth=`echo $Qtestboth+1 |bc`
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-oldfolder" ] || [ "$iter" == "-of" ]
  then
    next=1
    last="-of"
    continue
  fi
  ### -resultsfile "X"
  if [ "$last" == "-rf" ]
  then
    resultsaddition="$iter"
    QfromfolderOLD=0
    Qtestboth=`echo $Qtestboth+1 |bc`
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-resultsfile" ] || [ "$iter" == "-rf" ]
  then
    next=1
    last="-rf"
    continue
  fi
  ### -method "X"
  if [ "$last" == "-method" ]
  then
    method="$iter"
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-method" ] || [ "$iter" == "-m" ]
  then
    next=1
    last="-method"
    continue
  fi
  # Array submission
  if [ "$iter" == "-array" ]
  then
    Qarray=1
    echo "No need to use $iter argument anymore. [Used by default.]"
    continue
  fi
  # Jobs per task
  if [ "$iter" == "-jpt" ]
  then
    last="-jpt"
    continue
  fi
  if [ "$last" == "-jpt" ];
  then
    last=""
    Qjpt=$iter
    continue
  fi
  # greasy
  if [ "$iter" == "-greasy" ]
  then
    Qgreasy=1
    continue
  fi
  # cores on node
  if [ "$iter" == "-cores_on_node" ] || [ "$iter" == "-con" ]
  then
    last="-cores_on_node"
    continue
  fi
  if [ "$last" == "-cores_on_node" ];
  then
    cores_in_node=$iter
    continue
  fi
  # JKQC
  if [ "$iter" == "-pickle" ] || [ "$iter" == "-JKQC" ]
  then
    Qpickle=1
    continue
  fi
  ###
  arguments_help+=( "${arguments[i]}" )
done
arguments=("${arguments_help[@]}")

# there should not be more arguments
therest=${arguments[@]}
if [ ! -z "$therest" ]
then
  JKecho 0 "Some argument(s) is/are not understood: ${therest}. [${cfRED}EXITING${cfDEF}]"
  exit
fi

#some controlling
if [ $Qtestboth -gt 1 ]
then 
  JKecho 0 "Do not understand input ... use just one of -rf or -of. [${cfRED}EXITING${cfDEF}]"
  exit
fi

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################
JKecho 1 "${cfGREEN}$program${cfDEF} calculations will be performed."

#checking old folder or results file
if [ $QfromfolderOLD -eq 0 ]
then
  renamcheck="$(basename ${resultsaddition} .dat)_FILTERED.dat"
  if [ -f $renamcheck ]
  then
    filetake=$renamcheck
  elif [ -f ${resultsaddition} ]
  then 
    filetake=${resultsaddition}
  elif [ -f results${resultsaddition}_FILTERED.dat ]
  then
    filetake=results${resultsaddition}_FILTERED.dat
  elif [ -f results${resultsaddition}.dat ]
  then
    filetake=results${resultsaddition}.dat
  else
    JKecho 0 "File ${cfYELLOW}results${resultsaddition}.dat${cfDEF} does not exist. [${cfRED}EXIT${cfDEF}]"
    exit
  fi
else
  if [ ! -d ${folderOLD} ]
  then
    JKecho 0 "Folder ${cfBLUE}${folderOLD}${cfDEF} does not exist. [${cfRED}EXIT${cfDEF}]"
    exit
  fi
fi

#checking if the folder for new calculations already exist
if [ -d $folderNEW ]; 
then 
  JKecho 0 "Folder ${cfBLUE}$folderNEW${cfDEF} already exists. [${cfRED}EXIT${cfDEF}]"
  exit
else
  mkdir $folderNEW
  JKecho 2 "Folder ${cfBLUE}$folderNEW${cfDEF} has been created."
fi

#save general arguments
function JKarguments {
echo """method=\"$method\"
CHARGE=$CHARGE
MULTIPLICITY=$MULTIPLICITY
MEMORY=$SCmem
PARTITION=$SCpar
NODES=$SCnodes
TIME=$SCtime
CPU=$SCcpu""" > arguments.txt
}

if [ "$METHODsupercomputer" == "loc" ]
then
  loc=" -loc"
else
  loc=""
fi

#subfoldering
if [ $QfromfolderOLD -eq 1 ]
then
  cd $folderOLD
  subfolders="`ls -d ${folderOLD}_* | xargs`"
  cd $currentdirpath 
fi
const_iter=0
Qjpt_iter=0
jobscount=0
if [ ! -z "$subfolders" ] 
then
  JKecho 2 "Subfoldering from previous directory is used."
  JKecho 3 "Subfolders: ${cfBLUE}$subfolders${cfDEF}"
  for sub in $subfolders
  do 
    Qjpt_iter=`echo $Qjpt_iter + 1 |bc`
    const_iter=`echo $const_iter+1 |bc`
    newsub=`sed "s/$folderOLD/$folderNEW/g" <<< $sub`
    #cd $currentdirpath/$folderOLD/${sub}/${name}-LM/
    #files=`ls *.xyz`
    #cd $currentdirpath/$folderNEW
    mkdir $currentdirpath/$folderNEW/$newsub
    #mkdir $currentdirpath/$folderNEW/$newsub/${name}-LM
    cd $currentdirpath/$folderNEW/$newsub 
    JKarguments
    cd $currentdirpath
    rm $newsub/.* 2> /dev/null
    if [ "$Qperform" == 2 ]
    then
      #command0="cd $currentdirpath/$folderOLD/${sub}/${name}-LM/;files=\`ls *.xyz\`;cd $currentdirpath/$folderNEW;mkdir $newsub/${name}-LM;for file in \$files; do commandTODO=\"cd $currentdirpath/$folderNEW/$newsub/${name}-LM/; source ~/.JKCSusersetup.txt; program_$program $currentdirpath/$folderOLD/$sub/${name}-LM/\$file;\"; echo \$commandTODO >> $newsub/commands_TODO.txt; done; cp $newsub/commands_TODO.txt $newsub/.crealTODO.txt; echo \"1 $newsub/\" >> .link.txt"
      command0="cd $currentdirpath/$folderNEW;mkdir $newsub/${name}-LM;ls $currentdirpath/$folderOLD/${sub}/${name}-LM/*.xyz | xargs -n 1 > files.txt;L=\`cat files.txt | wc -l\`;fi=0;while [\$fi -lt \$L]; do fi=\`echo \$fi+1|bc\`;file=\`head -n \$fi $currentdirpath/$folderNEW/$newsubs/files.txt | tail -n 1\`;commandTODO=\"cd $currentdirpath/$folderNEW/$newsub/${name}-LM/; source ~/.JKCSusersetup.txt$loc; program_$program \$file${addbase};\"; echo \$commandTODO >> $newsub/commands_TODO.txt; done; cp $newsub/commands_TODO.txt $newsub/.crealTODO.txt; echo \"1 $newsub/\" >> .link.txt;" 
    else
      if [ $Qpickle -eq 0 ]
      then
        test=`ls $currentdirpath/$folderOLD/${sub}/${name}-LM/*.xyz 2> /dev/null | wc -w`
        if [ $test -eq 0 ]
        then
          test=`ls $currentdirpath/$folderOLD/${sub}/${name}-LM/*.pkl 2> /dev/null | wc -w`
          if [ $test -eq 0 ]
          then
            JKecho 0 "No XYZ nor PKL file found in $currentdirpath/$folderOLD/${sub}/${name}-LM/."
            JKecho 0 "I will continue anyway but this subfolder might be corrupted."
          else
            Qpickle=1  
          fi
        fi
      fi
      if [ $Qpickle -eq 1 ]
      then
        command0="source ~/.JKCSusersetup.txt$loc;cd $currentdirpath/$folderOLD/${sub}/${name}-LM/; program_JKQCpickle *.pkl -xyz; cd $currentdirpath/$folderNEW;mkdir $newsub/${name}-LM;ls $currentdirpath/$folderOLD/${sub}/${name}-LM/*.xyz | xargs -n 1 > $newsub/files.txt;L=\`cat $newsub/files.txt | wc -l\`;fi=0;while [ \$fi -lt \$L ]; do fi=\`echo \$fi+1|bc\`;file=\`head -n \$fi $currentdirpath/$folderNEW/$newsub/files.txt | tail -n 1\`;commandTODO=\"cd $currentdirpath/$folderNEW/$newsub/${name}-LM/;program_$program \$file${addbase};\"; eval \"\$commandTODO\"; done; rm $currentdirpath/$folderOLD/${sub}/${name}-LM/*.xyz; program_JKQCpickle *.log; rm *.log; rm *.xyz;"
      else
        #command0="cd $currentdirpath/$folderOLD/${sub}/${name}-LM/;files=\`ls *.xyz\`;cd $currentdirpath/$folderNEW;mkdir $newsub/${name}-LM;source ~/.JKCSusersetup.txt;for file in \$files; do commandTODO=\"cd $currentdirpath/$folderNEW/$newsub/${name}-LM/;program_$program $currentdirpath/$folderOLD/$sub/${name}-LM/\$file;\"; eval \"\$commandTODO\"; done;" 
        command0="cd $currentdirpath/$folderNEW;mkdir $newsub/${name}-LM;source ~/.JKCSusersetup.txt$loc;ls $currentdirpath/$folderOLD/${sub}/${name}-LM/*.xyz | xargs -n 1 > $newsub/files.txt;L=\`cat $newsub/files.txt | wc -l\`;fi=0;while [ \$fi -lt \$L ]; do fi=\`echo \$fi+1|bc\`;file=\`head -n \$fi $currentdirpath/$folderNEW/$newsub/files.txt | tail -n 1\`;commandTODO=\"cd $currentdirpath/$folderNEW/$newsub/${name}-LM/;program_$program \$file${addbase};\"; eval \"\$commandTODO\"; done;"
      fi
    fi
    if [ "$Qperform" == 2 ]
    then 
      echo "$command0" >> $currentdirpath/$folderNEW/commands_TODO.txt 
    else
      #echo "$command0" >> $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
      command0over_iterations+=$command0
      if [ $Qjpt_iter -eq $Qjpt ]
      then
        echo "$command0over_iterations" >> $currentdirpath/$folderNEW/commands_TODO.txt
        #cat $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt | xargs -d$'\n'  >> $currentdirpath/$folderNEW/commands_TODO.txt
        #rm $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
        Qjpt_iter=0
        jobscount=`echo $jobscount+1|bc`
        command0over_iterations=""
      fi
    fi
    #for file in $files
    #do
    #  commandTODO="cd $currentdirpath/$folderNEW/$newsub/${name}-LM/; source ~/.JKCSusersetup.txt; program_$program $currentdirpath/$folderOLD/$sub/${name}-LM/$file;"
    #  echo $commandTODO >> $newsub/commands_TODO.txt
    #done
    #cp $newsub/commands_TODO.txt $newsub/.crealTODO.txt
    JKecho 3 "    Commands like ${cfMAGENTA}$command0${cfDEF} written to ${cfBLUE}$newsub/${cfYELLOW}commands_TODO.txt${cfDEF}"
    #echo "cd $newsub; sh $toolspath/SCRIPTS/JKperform2.sh; cd .." >> commands_TODO.txt
    #echo "1 $newsub/" >> .link.txt
  done
  if [ "$Qperform" == 2 ]
  then
    cp $currentdirpath/$folderNEW/commands_TODO.txt $currentdirpath/$folderNEW/.crealTODO.txt
    jobscount=`echo $subfolders | xargs -n 1 | wc -l`
  else
    if [ ! -z "$command0over_iterations" ] #[ -e $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt ]
    then
      echo "$command0over_iterations" >> $currentdirpath/$folderNEW/commands_TODO.txt
      #cat $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt | xargs -d$'\n' >> $currentdirpath/$folderNEW/commands_TODO.txt
      #rm $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
      Qjpt_iter=0
      jobscount=`echo $jobscount+1|bc`
      command0over_iterations=""
    fi
  fi
else
  JKecho 2 "Calculations will be performed in directory ${cfBLUE}$folderNEW/${name}-LM${cfDEF}"
  if [ $QfromfolderOLD -eq 1 ]
  then
    cd $folderOLD
    cd ${name}-LM/
    files=`ls *.xyz`
    files_help=""
    for file in $files
    do 
      files_help+=" $currentdirpath/$folderOLD/${name}-LM/$file"
    done
    files=$files_help
  else
    files=`cat $filetake | awk '{print $1}'`
  fi
  JKecho 2 "Files (${cfBLUE}`echo $files | wc -w`${cfDEF}) selected."
  cd $currentdirpath/$folderNEW
  mkdir ${name}-LM
  JKarguments
  for file in $files
  do
    if [ $Qjpt_iter -eq 0 ]
    then
      commandTODO="source ~/.JKCSusersetup.txt$loc;"
    fi
    Qjpt_iter=`echo $Qjpt_iter + 1 |bc`
    const_iter=`echo $const_iter+1 |bc`
    #command="source ~/.JKCSusersetup.txt;\n program_$program $currentdirapth/$folderOLD/${name}-LM/$file"
    #printf "$command" > run${scriptfilecommand}.sh
    commandTODO+="cd $currentdirpath/$folderNEW/${name}-LM/; program_$program $file${addbase};"
    if [ "$Qperform" == 2 ]
    then
      echo "$commandTODO" >> $currentdirpath/$folderNEW/commands_TODO.txt
    else
      #echo "$commandTODO" >> $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
      commandTODOover_iterations=$commandTODO
      if [ $Qjpt_iter -eq $Qjpt ]
      then
        echo "$commandTODOover_iterations" >> $currentdirpath/$folderNEW/commands_TODO.txt
        #cat $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt | xargs -d$'\n' >> $currentdirpath/$folderNEW/commands_TODO.txt
        #rm $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
        Qjpt_iter=0
        jobscount=`echo $jobscount+1|bc`
        commandTODOover_iterations=""
      fi
    fi
  done
  if [ "$Qperform" == 2 ]
  then
    rm .* 2> /dev/null
    cp commands_TODO.txt .crealTODO.txt
    jobscount=`echo $files | xargs -n 1 | wc -l`
  else
    if [ ! -z "$commandTODOover_iterations" ] #[ -e $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt ]
    then
      echo "$commandTODOover_iterations" >> $currentdirpath/$folderNEW/commands_TODO.txt
      #cat $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt | xargs -d$'\n' >> $currentdirpath/$folderNEW/commands_TODO.txt
      #rm $currentdirpath/$folderNEW/.Qjpt_commands_TODO.txt
      jobscount=`echo $jobscount+1|bc`
      commandTODOover_iterations=""
    fi
  fi
  JKecho 3 "    Commands like ${cfMAGENTA}$commandTODO${cfDEF} written to ${cfYELLOW}commands_TODO.txt${cfDEF}"
fi
JKecho 2 "Subfolder ${cfBLUE}$folderNEW${cfDEF} has been created."
cd $currentdirpath/$folderNEW

### Sending jobs ###
if [ ! -e commands_TODO.txt ]; then touch commands_TODO.txt; fi
if [ "$Qprograms" == 2 ]
then
  echo "1 $folderNEW/" >> ../.link.txt
fi

#jobscount=`wc -l commands_TODO.txt | awk '{print $1}'`
JKecho 2 "Counting number of tasks: ${cfBLUE}$jobscount${cfDEF} (max possible ${cfBLUE}$SCtasks${cfDEF})"
if [ $jobscount -le $SCtasks ]
then
  SCtasks=$jobscount
else
  if [ "$Qperform" != 2 ] && [ "$METHODsupercomputer" != "loc" ]
  then
    JKecho 0 "Max number of jobs to be sent is greater then allowed."
    JKecho 0 "Use [${cfCYAN}-maxtasks${cfDEF} ${cfBLUE}$jobscount${cfDEF}] option!"
    exit
  fi
  SCtasks=$jobscount
fi
JKecho 2 "Tasks to be submitted: ${cfBLUE}$SCtasks${cfDEF}"

if [ "$METHODsupercomputer" == "loc" ]
then
  Qarray=0
fi

#IF greasy module should be used
if [ "$Qgreasy" == "1" ]
then
  #number of nodes e.g. 1
  #number of tasks = SCtasks e.g. 100 = nworkers = n_rows=jobscount
  #number of threads (cores) per task e.g. 8
  #memory of 1 task ?? BUT I KNOW mem_per_cpu (which is actually core, right?)
  max_cores_used=`echo $jobscount*$SCcpu | bc`
  if [ $cores_in_node -ge $max_cores_used ]
  then
    one_node_tasks=$SCtasks
    one_node_cores=`echo $jobscount*$SCcpu | bc`
    SCnodes=1
    JKecho 2 "GREASY: nodes = $SCnodes, 1-node-tasks = $one_node_tasks, 1-node-utilized-cores = $one_node_cores"
  else
    one_node_tasks=`echo $cores_in_node/$SCcpu | bc` 
    one_node_cores=`echo $SCcpu*$one_node_tasks | bc`
    nodes_required=`echo "($jobscount+$one_node_tasks-1)/$one_node_tasks" | bc`
    JKecho 2 "GREASY: nodes = $SCnodes, 1-node-tasks = $one_node_tasks, 1-node-utilized-cores = $one_node_cores"
    if [ $nodes_required -gt $SCnodes ]
    then
      JKecho 0 "Sorry I need at least ${cfBLUE}$nodes_required${cfDEF} nodes, but you offered me just ${cfBLUE}$SCnodes${cfDEF} node(s). [${cfRED}EXIT${cfDEF}]"
      exit
    else
      SCnodes=$nodes_required
    fi
  fi
  #equivalently for each node
  total_tasks=`echo $one_node_tasks*$SCnodes | bc`
  
  #--ntasks-per-core=1
  #--ntasks-per-node=$one_node_tasks
  #--cpus-per-task=$SCcpu  
  #SC_command="sbatch -J "$currentdir" -p $SCpar --time $SCtime --ntasks $SCnodes -N $SCnodes --mem-per-cpu $SCmem --ntasks-per-node=$one_node_tasks --cpus-per-task $SCcpu $SBATCHuseradd $toolspath/SCRIPTS/JKsend "  
  #SC_command="sbatch -J "$currentdir" -p $SCpar --time $SCtime --ntasks $SCnodes -N $SCnodes --ntasks-per-node=$one_node_tasks --cpus-per-task $SCcpu $SBATCHuseradd $toolspath/SCRIPTS/JKsend "
  SC_command=`program_SBATCH "$currentdir" $SCpar $SCtime $SCnodes $SCmem`" --ntasks $SCnodes --ntasks-per-node=$one_node_tasks --cpus-per-task $SCcpu $toolspath/SCRIPTS/JKsend " 
fi 


 
#Qlinking=0
#if [ $Qlinking -eq 1 ]
#then
#  echo "LINK 1 $currentdirpath" >> commands_TODO.txt
#  if [ -e ../commands_TODO.txt ]
#  then
#    cp ../commands_TODO.txt ../commands_TODO.txt_help
#    echo "LINK 1 $currentdirpath/$folderNEW" > ../commands_TODO.txt
#    cat ../commands_TODO.txt_help >> ../commands_TODO.txt
#    rm ../commands_TODO.txt_help
#  else
#    echo "LINK 1 $currentdirpath/$folderNEW" > ../commands_TODO.txt
#  fi
#fi

echo "$SC_command sh INPUTFILE" > submit

for i in `seq $SCtasks -1 1`
do
  if [ "$Qperform" == 2 ]
  then
    $SC_command sh $toolspath/SCRIPTS/JKperform2.sh
    echo "$SC_command sh $toolspath/SCRIPTS/JKperform2.sh" >> output
  elif [ "$Qgreasy" == "1" ]
  then
    echo  "GREASY: eval '`tail -n $i commands_TODO.txt | head -n 1`'" >> output
    echo  "$toolspath/SCRIPTS/JKsend '`tail -n $i commands_TODO.txt | head -n 1`'" >> .runLIST
  else
    echo "`tail -n $i commands_TODO.txt | head -n 1`" > .run$i
    if [ $Qarray -eq 1 ]
    then
      if [ $i -eq 1 ]
      then
        if [ $Qarraymax -gt 0 ]
        then
          arraymax="%$Qarraymax"
        else
          arraymax=""
        fi
        SC_command=`echo $SC_command | sed "s/sbatch/sbatch --array=1-$SCtasks$arraymax/"`
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" >> output
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" > .run
        #job=$(eval $SC_command "`tail -n $i commands_TODO.txt | head -n 1`")
        job=$(/bin/bash .run)
        if [ ! -z "$job" ] ;then echo $job;fi
        echo $job | awk '{print $4}'  >> .jobs.txt
      fi
    else
      echo  "$SC_command sh .run$i" >> output
      echo  "$SC_command sh .run$i" > .run
      #job=$(eval $SC_command "`tail -n $i commands_TODO.txt | head -n 1`")
      job=$(/bin/bash .run)
      #job=$(eval `cat .run`)
      if [ ! -z "$job" ] ;then echo $job;fi
      echo $job | awk '{print $4}'  >> .jobs.txt
    fi
  fi
done

if [ "$Qgreasy" == "1" ]
then
  echo "$SC_command 'export OMP_NUM_THREADS=$SCcpu;export GREASY_NWORKERS=$total_tasks;export GREASY_NWORKERS_PER_NODE=$one_node_tasks;module load greasy; greasy .runLIST'" >> output
  echo "$SC_command 'export OMP_NUM_THREADS=$SCcpu;export GREASY_NWORKERS=$total_tasks;export GREASY_NWORKERS_PER_NODE=$one_node_tasks;module load greasy; greasy .runLIST'" > .run
  job=$(/bin/bash .run)
  if [ ! -z "$job" ] ;then echo $job;fi
  echo $job | awk '{print $4}'  >> .jobs.txt
fi

###################################################################
cd $currentdirpath
JKecho 1 "Performing calculations/Calculations submitted or calculation done (-loc)."
exit


##cd $currentdirpath
##JKecho 2 "Subfoldering parameter set to: $Qsubfoldering"
##
###TAKING LIST OF FILES 
###from OLD or from resultsXXX.dat
##if [ $QfromfolderOLD -eq 1 ]
##then
##  #taking from OLD folder
##  checkdir=${currentdirpath}/${folderOLD}/${name}-LM
##  if [ -d $checkdir ]
##  then
##    files=`ls $checkdir/*.xyz`
##    #if [ -z "$files" ]
##    #then
##    #  JKecho 1 "No xyz files found in ${cfGREEN}${checkdir}${cfDEF}. [${cfRED}SKIP${cfDEF}]"
##    #  cd ${currentdirpath}${folderOLD}/${name}-LM
##    #  $toolspath/JKlog2xyz *.log
##    #  cd -
##    #  files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##    #fi
##  else
##    checkdir=${currentdirpath}/${folderOLD}/*/${name}-LM/
##    files=`ls ${checkdir}*.xyz`
##  fi
##  if [ -z "$files" ]
##  then
##    JKecho 1 "No xyz files found in ${cfGREEN}${checkdir}${cfDEF}. [${cfRED}SKIP${cfDEF}]"
##    exit
##  fi
##else
##  #Taking from results file (varibale filetake)
##  files=`cat $filetake | awk '{print $1}' | xargs`
##  if [ -z "$files" ]
##  then
##    JKecho 1 "Probably no xyz files in the file ${cfYELLOW}$filetake${cfDEF}. ${cfRED}SKIP${cfDEF}"
##    exit
##  fi
##fi
##echo $files
##amountoffiles=`cat $files | wc -l`
##JKecho 2 "Files were collected. The amount of files: ${cfBLUE}${amountoffiles}${cfDEF}."
##
##
##exit
##  ### TAKING LIST OF FILES 
##  # from OLD or from resultsXXX.dat
##  if [ $QfromfolderOLD -eq 1 ]
##  then
##    #taking from OLD folder
##    if [ -d ${folderOLD}/${name}-LM ]
##    then
##      files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##      if [ -z $files ]
##      then
##        cd ${folderOLD}/${name}-LM
##        $toolspath/JKlog2xyz *.log
##        cd ..
##        files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##      fi
##    else
##      files=`ls ${PWD}/${folderOLD}/*/${name}-LM/*.xyz`
##    fi
##  else
##    #Take just something in energy range or all files
##    if [ $Qdiff -eq 1 ]
##    then
##      # 3 or 4 columns?
##      columns=4
##      test=`head -n 1 $filetake | awk -v var=$columns '{print $var}'` 
##      if [ -z $test ]; then columns=3; fi
##      #find minimum in column
##      min=`cat $filetake | sort -nrk $columns | tail -n 1 | awk -v var=$columns '{print $var}'` 
##      #take specific files
##      files=`cat $filetake | awk -v var1=$diff -v var2=$min -v var3=$columns '$var3<(var2+var1/627.503)' | awk '{print $1}' | xargs`
##    else
##      #take all files
##      files=`cat $filetake | awk '{print $1}' | xargs` 
##    fi
##  fi
##  if [ -z "$files" ]
##  then
##    echo "$scriptfile: Probably no xyz files. CONTINUING"
##    cd ../
##    continue
##  fi
##  ###############################
##  row=`Felements $files`
##  echo "$scriptfile: $row files in total"
##  
##  ##PREPARE NEW FOLDER
##  cd $folderNEW
##  #calculate just those what were not calculated yet
##  if [ -e $calculated ] 
##  then
##    row=0 
##    for i in $files 
##    do 
##      N=`grep -c "$i" calculated.dat`
##      if [ $N -eq 0 ]
##      then
##        echo $i >> $calculated
##        filesNEXT+=" $i"
##        row=`echo $row+1|bc`
##      fi
##    done
##    files=$filesNEXT
##  else 
##    echo $files | xargs -n 1 > $calculated
##    row="all"
##  fi 
##  ###
##  if [ ! -d ${name}-LM ]; then mkdir ${name}-LM;fi
##  cd ${name}-LM
##  ###
##  #queue file name
##  random=$RANDOM
##  test=0
##  while [ $test -eq 0 ]
##  do
##    queueJKCS=queue${scriptfile}_${random}.dat
##    if [ -e $queueJKCS ]
##    then
##      random=$RANDOM
##    else
##      test=1
##    fi
##  done
##  qf=../../$queuefile 
##  qf2=../../$queuefile2
## 
##  # RUN/
##  echo "$scriptfile: $row files are gonna be calculated"
##  if [ ! -z "$files" ]
##  then
##    #command
##    command="$toolspath/JKrun -programs $Qprograms -time $Qtime2 -q $qf2 -max $MAXJOBS -r $REPEAT -f $feeding -p $program -inp $queueJKCS"
##    if [ ! -z $Qpartition2 ]
##    then
##      command+=" -partition $Qpartition2"
##    fi
##    ###
##    # G16
##    if [ "$program" == "G16" ]
##    then 
##      $toolspath/JKxyz2com -cpu $CPU  $addmemory -nr -char $totcharge -mult $MULTIPLICITY $addbase -method "$method" $files >> output
##      inpfiles=`ls *.com`
##    fi
##    # XTB
##    if [ "$program" == "XTB" ] 
##    then
##      cp $files ./ 
##      inpfiles=`ls *.xyz`
##      #unpaired electrons 2*S=M-1
##      unpaired=`echo $MULTIPLICITY-1|bc`
##      #command improvement
##      command+=`echo " -opt \"$method -chrg $totcharge -uhf $unpaired\""`
##    fi
##    # ORCA
##    if [ "$program" == "ORCA" ]
##    then
##      $toolspath/JKxyz2inp -cpu $CPU $addmemory -char $totcharge -mult $MULTIPLICITY -method "$method" $files >> output
##      inpfiles=`ls *.job`
##    fi
##    # DLPNO
##    if [ "$program" == "DLPNO" ]
##    then
##      cp $files ./ 
##      inpfiles=`ls *.xyz`
##      if [ "$method" == "# wb97xd 6-31+g* opt" ]; then method=""; fi
##      #command improvement
##      command+=`echo " -opt \"$method -chrg $totcharge -mult $MULTIPLICITY\""`
##    fi
##    ################
##    echo $inpfiles > $queueJKCS
##
##    echo "$command" > run${scriptfile}_${random}.sh 
##    # checking queue program
##    if [ -z $programSendToQueue1part ] && [ -z $programSendToQueue2part ]
##    then
##      # calculate
##      sh run${scriptfile}_${random}.sh 
##    else
##      # calculate ... send to queue
##      #echo "$scriptfile: $programSendToQueue1part $parameters $programSendToQueue2part \"${command}\""
##      queue=`eval $programSendToQueue1part $parameters $programSendToQueue2part sh run${scriptfile}_${random}.sh`
##      echo "$scriptfile: $queue"
##      echo $queue | awk '{print $4}' >> $qf
##    fi
##    ##################### 
##  fi
##
##  cd ../../../
###done
##echo "$scriptfile: Done :-D"
