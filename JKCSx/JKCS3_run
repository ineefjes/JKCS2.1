#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that runs DFT out of another folder            ## 
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "Today I have pain in my back ... that is all."        ##
##                                          Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP
function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "Program for running 3rd party calculations\n"
  printf """
  $scriptfile ${cfCYAN}[OPTIONS(s)]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ................ print this help
   -nf,-newfolder \"X\" ... name of the new folder [def=XTB]
   -of,-oldfolder \"X\" ... name of the olf folder containing XYZs [def=ABC]
   -rf,-resultsfile \"X\" . uses 1. column of results\"X\"{_FILTERED}.dat
   -m,-method \"X\" ....... method used by 3rd party quantum program
   -p,-program \"X\" ...... 3rd party quantum program 
                          (it has to be described in ~/.JKCSusersetup.txt)
     OTHERS: -bs,-add,-addbase \"ATOM\" 

  
  ${cfMAGENTA}EXAMPLES:${cfDEF}

   ${cfYELLOW}XTB:${cfDEF}
     $scriptfile    
     $scriptfile -p XTB -nf XTB_freq -rf XTB -m \"-ohess\"
   ${cfYELLOW}G16:${cfDEF}
     $scriptfile -p G16 -rf XTB     -nf DFT_sp   -m \"# HF 6-31+g*\"
     $scriptfile -p G16 -rf XTB     -nf DFT_opt  -m \"# wb97xd 6-31++g** opt=verytight\"
     $scriptfile -p G16 -rf DFT_opt -nf DFT_freq -m \"# wb97xd 6-31++g** freq Temperature=298.15\"
   ${cfYELLOW}ORCA:${cfDEF}
     $scriptfile -p ORCA -rf XTB -nf OPT -m \"! PBE0 def2-TZVP TIGHTSCF Opt D3BJ\"
   ${cfYELLOW}G16 ADVANCED:${cfDEF}
     $scriptfile -p G16 -rf XTB -nf DFT -bc I -m \"#wb97xd GEN Pseudo=Read Opt Int=UltraFine Freq MaxDisk=32GB\" -mem 12GB -cpu 16
     $scriptfile -p ORCA -rf DFT_freq -nf DLPNO -m \"! DLPNO-CCSD(T) aug-cc-pvtzaug-cc-pvtz/C GRID4 nofinalgrid TightPNO TightSCF NOPOP NOPRINTMOS\"\n"""
  printf "#################################################################\n"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# method 
JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load charge and multiplicity
JKloadCHARM

# load amount of molecules
M=`head -n 1 $inputfile | awk '{print $6}'`

# -loc or load supercomputer parameters
JKloadsupercomputer

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script

#new folder name
folderNEW=$program

#old folder name
folderOLD="ABC"

# are we taking from some file or from some folder?
QfromfolderOLD=1
# just testing user input for -rf and -of
Qtestboth=0

#how many times repeat in case of fail
#TODO REPEAT=0

### METHOD 
method="--opt vtight"

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  ## repeat
  #if [ "$last" == '-repeat' ]
  #then
  #  REPEAT="$i"
  #  last=''
  #  next=0
  #  continue
  #fi
  #if [ "$i" == "-repeat" ]
  #then
  #  last='-repeat'
  #  next=1
  #  continue
  #fi
  # addbase
  if [ "$last" == '-addbase' ]
  then
    addbase="-addbase $iter"
    last=''
    next=0
    continue
  fi
  if [ "$iter" == "-addbase" ] || [ "$iter" == "-add" ] || [ "$iter" == "-bs" ]
  then
    last='-addbase'
    next=1
    continue
  fi
  ### -newfolder "X"
  if [ "$last" == "-nf" ]
  then
    folderNEW="$iter"
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-newfolder" ] || [ "$iter" == "-nf" ]
  then
    next=1
    last="-nf"
    continue
  fi
  ### -oldfolder "X"
  if [ "$last" == "-of" ]
  then
    folderOLD="$iter"
    QfromfolderOLD=1
    Qtestboth=`echo $Qtestboth+1 |bc`
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-oldfolder" ] || [ "$iter" == "-of" ]
  then
    next=1
    last="-of"
    continue
  fi
  ### -resultsfile "X"
  if [ "$last" == "-rf" ]
  then
    resultsaddition="$iter"
    QfromfolderOLD=0
    Qtestboth=`echo $Qtestboth+1 |bc`
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-resultsfile" ] || [ "$iter" == "-rf" ]
  then
    next=1
    last="-rf"
    continue
  fi
  ### -method "X"
  if [ "$last" == "-method" ]
  then
    method="$iter"
    last=""
    next=0
    continue
  fi
  if [ "$iter" == "-method" ] || [ "$iter" == "-m" ]
  then
    next=1
    last="-method"
    continue
  fi
  ###
  arguments_help+=( "${arguments[i]}" )
done
arguments=("${arguments_help[@]}")

# there should not be more arguments
therest=${arguments[@]}
if [ ! -z "$therest" ]
then
  JKecho 0 "Some argument(s) is/are not understood: ${therest}. [${cfRED}EXITING${cfDEF}]"
  exit
fi

#some controlling
if [ $Qtestboth -gt 1 ]
then 
  JKecho 0 "Do not understand input ... use just one of -rf or -of. [${cfRED}EXITING${cfDEF}]"
  exit
fi

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################
JKecho 1 "$program calculations will be performed."

#checking old folder or results file
if [ $QfromfolderOLD -eq 0 ]
then
  renamcheck="$(basename ${resultsaddition} .dat)_FILTERED.dat"
  if [ -f $renamcheck ]
  then
    filetake=$renamcheck
  elif [ -f ${resultsaddition} ]
  then 
    filetake=${resultsaddition}
  elif [ -f results${resultsaddition}_FILTERED.dat ]
  then
    filetake=results${resultsaddition}_FILTERED.dat
  elif [ -f results${resultsaddition}.dat ]
  then
    filetake=results${resultsaddition}.dat
  else
    JKecho 0 "File results${addition}.dat does not exist. [${cfRED}EXIT${cfDEF}]"
    exit
  fi
else
  if [ ! -d ${folderOLD} ]
  then
    JKecho 0 "Folder ${folderOLD} does not exist. [${cfRED}EXIT${cfDEF}]"
    exit
  fi
fi

#checking if the folder for new calculations already exist
if [ -d $folderNEW ]; 
then 
  JKecho 0 "Folder $folderNEW already exists. [${cfRED}EXIT${cfDEF}]"
  exit
else
  mkdir $folderNEW
  JKecho 2 "Folder $folderNEW has been created."
fi

#save general arguments
function JKarguments {
echo """method=\"$method\"
CHARGE=$CHARGE
MULTIPLICITY=$MULTIPLICITY
MEMORY=$SCmem
PARTITION=$SCpar
NODES=$SCnodes
TIME=$SCtime
CPU=$SCcpu""" > arguments.txt
}


#subfoldering
if [ $QfromfolderOLD -eq 1 ]
then
  cd $folderOLD
  subfolders="`ls -d ${folderOLD}_* | xargs`"
  cd $currentdirpath 
fi
if [ ! -z "$subfolders" ] 
then
  JKecho 2 "Subfoldering from previous directory is used."
  JKecho 3 "Subfolders: $subfolders"
  for sub in $subfolders
  do 
    newsub=`sed "s/$folderOLD/$folderNEW/g" <<< $sub`
    cd $currentdirpath/$folderOLD/${sub}/${name}-LM/
    files=`ls *.xyz`
    cd $currentdirpath/$folderNEW
    mkdir $newsub
    mkdir $newsub/${name}-LM
    cd $newsub 
    JKarguments
    cd ..
    for file in $files
    do
      #command="source ~/.JKCSusersetup.txt;\n program_$program $currentdirpath/$folderOLD/${name}-LM/$file"
      #printf "$command" > run${scriptfilecommand}.sh
      commandTODO="cd $currentdirpath/$folderNEW/$newsub/${name}-LM/; source ~/.JKCSusersetup.txt; program_$program $currentdirpath/$folderOLD/$sub/${name}-LM/$file;"
      echo $commandTODO >> $newsub/commands_TODO.txt
    done
    JKecho 3 "    Commands like $commandTODO written to $newsub/commands_TODO.txt"
    echo "cd $newsub; sh $toolspath/SCRIPTS/JKperform.sh; cd .." >> commands_TODO.txt
  done
else
  JKecho 2 "Calculations will be performed in directory ${cfYELLOW}$folderNEW/${name}-LM${cfDEF}"
  if [ $QfromfolderOLD -eq 1 ]
  then
    cd $folderOLD
    cd ${name}-LM/
    files=`ls *.xyz`
    files_help=""
    for file in $files
    do 
      files_help+=" $currentdirpath/$folderOLD/${name}-LM/$file"
    done
    files=$files_help
  else
    files=`cat $filetake | awk '{print $1}'`
  fi
  JKecho 2 "Files selected."
  cd $currentdirpath/$folderNEW
  mkdir ${name}-LM
  JKarguments
  for file in $files
  do
    #command="source ~/.JKCSusersetup.txt;\n program_$program $currentdirapth/$folderOLD/${name}-LM/$file"
    #printf "$command" > run${scriptfilecommand}.sh
    commandTODO="cd $currentdirpath/$folderNEW/${name}-LM/; source ~/.JKCSusersetup.txt; program_$program $file;"
    echo $commandTODO >> commands_TODO.txt
  done
  JKecho 3 "    Commands like "$commandTODO" written to commands_TODO.txt"
fi
JKecho 2 "Subfolder $folderNEW has been created."
cd $currentdirpath/$folderNEW

### Sending jobs ###
if [ ! -e commands_TODO.txt ]; then touch commands_TODO.txt; fi
#TODO might be dangerous if jobs already exist
jobscount=`wc -l commands_TODO.txt | awk '{print $1}'`

JKecho 2 "Counting amount of jobs: $jobscount"
if [ $jobscount -lt $SCtasks ]
then
  SCtasks=$jobscount
fi
JKecho 2 "Tasks used: $SCtasks"

Qlinking=0
if [ $Qlinking -eq 1 ]
then
  echo "LINK 1 $currentdirpath" >> commands_TODO.txt
  if [ -e ../commands_TODO.txt ]
  then
    cp ../commands_TODO.txt ../commands_TODO.txt_help
    echo "LINK 1 $currentdirpath/$folderNEW" > ../commands_TODO.txt
    cat ../commands_TODO.txt_help >> ../commands_TODO.txt
    rm ../commands_TODO.txt_help
  else
    echo "LINK 1 $currentdirpath/$folderNEW" > ../commands_TODO.txt
  fi
fi

for i in `seq 1 $SCtasks`
do
  #echo "sendjob $currentdir-ABC" 
  $SC_command sh $toolspath/SCRIPTS/JKperform.sh
  #echo "$SC_command"
done

###################################################################
cd $currentdirpath
JKecho 1 "This subfolder calculations/submisions are finished."
exit


##cd $currentdirpath
##JKecho 2 "Subfoldering parameter set to: $Qsubfoldering"
##
###TAKING LIST OF FILES 
###from OLD or from resultsXXX.dat
##if [ $QfromfolderOLD -eq 1 ]
##then
##  #taking from OLD folder
##  checkdir=${currentdirpath}/${folderOLD}/${name}-LM
##  if [ -d $checkdir ]
##  then
##    files=`ls $checkdir/*.xyz`
##    #if [ -z "$files" ]
##    #then
##    #  JKecho 1 "No xyz files found in ${cfGREEN}${checkdir}${cfDEF}. [${cfRED}SKIP${cfDEF}]"
##    #  cd ${currentdirpath}${folderOLD}/${name}-LM
##    #  $toolspath/JKlog2xyz *.log
##    #  cd -
##    #  files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##    #fi
##  else
##    checkdir=${currentdirpath}/${folderOLD}/*/${name}-LM/
##    files=`ls ${checkdir}*.xyz`
##  fi
##  if [ -z "$files" ]
##  then
##    JKecho 1 "No xyz files found in ${cfGREEN}${checkdir}${cfDEF}. [${cfRED}SKIP${cfDEF}]"
##    exit
##  fi
##else
##  #Taking from results file (varibale filetake)
##  files=`cat $filetake | awk '{print $1}' | xargs`
##  if [ -z "$files" ]
##  then
##    JKecho 1 "Probably no xyz files in the file ${cfYELLOW}$filetake${cfDEF}. ${cfRED}SKIP${cfDEF}"
##    exit
##  fi
##fi
##echo $files
##amountoffiles=`cat $files | wc -l`
##JKecho 2 "Files were collected. The amount of files: ${cfBLUE}${amountoffiles}${cfDEF}."
##
##
##exit
##  ### TAKING LIST OF FILES 
##  # from OLD or from resultsXXX.dat
##  if [ $QfromfolderOLD -eq 1 ]
##  then
##    #taking from OLD folder
##    if [ -d ${folderOLD}/${name}-LM ]
##    then
##      files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##      if [ -z $files ]
##      then
##        cd ${folderOLD}/${name}-LM
##        $toolspath/JKlog2xyz *.log
##        cd ..
##        files=`ls ${PWD}/${folderOLD}/${name}-LM/*.xyz`
##      fi
##    else
##      files=`ls ${PWD}/${folderOLD}/*/${name}-LM/*.xyz`
##    fi
##  else
##    #Take just something in energy range or all files
##    if [ $Qdiff -eq 1 ]
##    then
##      # 3 or 4 columns?
##      columns=4
##      test=`head -n 1 $filetake | awk -v var=$columns '{print $var}'` 
##      if [ -z $test ]; then columns=3; fi
##      #find minimum in column
##      min=`cat $filetake | sort -nrk $columns | tail -n 1 | awk -v var=$columns '{print $var}'` 
##      #take specific files
##      files=`cat $filetake | awk -v var1=$diff -v var2=$min -v var3=$columns '$var3<(var2+var1/627.503)' | awk '{print $1}' | xargs`
##    else
##      #take all files
##      files=`cat $filetake | awk '{print $1}' | xargs` 
##    fi
##  fi
##  if [ -z "$files" ]
##  then
##    echo "$scriptfile: Probably no xyz files. CONTINUING"
##    cd ../
##    continue
##  fi
##  ###############################
##  row=`Felements $files`
##  echo "$scriptfile: $row files in total"
##  
##  ##PREPARE NEW FOLDER
##  cd $folderNEW
##  #calculate just those what were not calculated yet
##  if [ -e $calculated ] 
##  then
##    row=0 
##    for i in $files 
##    do 
##      N=`grep -c "$i" calculated.dat`
##      if [ $N -eq 0 ]
##      then
##        echo $i >> $calculated
##        filesNEXT+=" $i"
##        row=`echo $row+1|bc`
##      fi
##    done
##    files=$filesNEXT
##  else 
##    echo $files | xargs -n 1 > $calculated
##    row="all"
##  fi 
##  ###
##  if [ ! -d ${name}-LM ]; then mkdir ${name}-LM;fi
##  cd ${name}-LM
##  ###
##  #queue file name
##  random=$RANDOM
##  test=0
##  while [ $test -eq 0 ]
##  do
##    queueJKCS=queue${scriptfile}_${random}.dat
##    if [ -e $queueJKCS ]
##    then
##      random=$RANDOM
##    else
##      test=1
##    fi
##  done
##  qf=../../$queuefile 
##  qf2=../../$queuefile2
## 
##  # RUN/
##  echo "$scriptfile: $row files are gonna be calculated"
##  if [ ! -z "$files" ]
##  then
##    #command
##    command="$toolspath/JKrun -programs $Qprograms -time $Qtime2 -q $qf2 -max $MAXJOBS -r $REPEAT -f $feeding -p $program -inp $queueJKCS"
##    if [ ! -z $Qpartition2 ]
##    then
##      command+=" -partition $Qpartition2"
##    fi
##    ###
##    # G16
##    if [ "$program" == "G16" ]
##    then 
##      $toolspath/JKxyz2com -cpu $CPU  $addmemory -nr -char $totcharge -mult $MULTIPLICITY $addbase -method "$method" $files >> output
##      inpfiles=`ls *.com`
##    fi
##    # XTB
##    if [ "$program" == "XTB" ] 
##    then
##      cp $files ./ 
##      inpfiles=`ls *.xyz`
##      #unpaired electrons 2*S=M-1
##      unpaired=`echo $MULTIPLICITY-1|bc`
##      #command improvement
##      command+=`echo " -opt \"$method -chrg $totcharge -uhf $unpaired\""`
##    fi
##    # ORCA
##    if [ "$program" == "ORCA" ]
##    then
##      $toolspath/JKxyz2inp -cpu $CPU $addmemory -char $totcharge -mult $MULTIPLICITY -method "$method" $files >> output
##      inpfiles=`ls *.job`
##    fi
##    # DLPNO
##    if [ "$program" == "DLPNO" ]
##    then
##      cp $files ./ 
##      inpfiles=`ls *.xyz`
##      if [ "$method" == "# wb97xd 6-31+g* opt" ]; then method=""; fi
##      #command improvement
##      command+=`echo " -opt \"$method -chrg $totcharge -mult $MULTIPLICITY\""`
##    fi
##    ################
##    echo $inpfiles > $queueJKCS
##
##    echo "$command" > run${scriptfile}_${random}.sh 
##    # checking queue program
##    if [ -z $programSendToQueue1part ] && [ -z $programSendToQueue2part ]
##    then
##      # calculate
##      sh run${scriptfile}_${random}.sh 
##    else
##      # calculate ... send to queue
##      #echo "$scriptfile: $programSendToQueue1part $parameters $programSendToQueue2part \"${command}\""
##      queue=`eval $programSendToQueue1part $parameters $programSendToQueue2part sh run${scriptfile}_${random}.sh`
##      echo "$scriptfile: $queue"
##      echo $queue | awk '{print $4}' >> $qf
##    fi
##    ##################### 
##  fi
##
##  cd ../../../
###done
##echo "$scriptfile: Done :-D"
