#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that runs QML on pickled databases             ## 
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## Clipping-Machine = Stapler (in Danish Klipsemaskine)   ##
##                                          Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

function help {
  program_PYTHON $scriptpath/../TOOLS/SCRIPTS/JKML.py -help
  exit
}

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# method 
#JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load charge and multiplicity
#JKloadCHARM

# load amount of molecules
if [ -e $inputfile ]
then
  M=`head -n 1 $inputfile | awk '{print $6}'`
#else
#  JKecho 0 "No ${cfYELLOW}${inputfile}${cfDEF} file. (${cfRED}Assuming M=1 if needed!!!${cfDEF})"
#  M=1;
fi

# -loc or load supercomputer parameters
JKloadsupercomputer

Qarray=1 #submit jobs as array?
Qarraymax=0 #max jobs per array
Qsplit=1 #HOW much is split the K, 1 = no split
Qsplitargument=""

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  # split
  if [ "$iter" == "-split" ] || [ "$iter" == "-startsplit" ] || [ "$iter" == "-finishsplit" ]
  then
    Qsplitargument="$iter"
    last="-split"
    continue
  fi
  if [ "$last" == "-split" ]
  then
    last=""
    Qsplit=$iter
    continue
  fi
  # Array submission
  if [ "$iter" == "-array" ]
  then
    Qarray=1
    echo "No need to use $iter argument anymore. [Used by default.]"
    continue
  fi
  #Qarraymax
  if [ "$iter" == "-arraymax" ]
  then
    last="-arraymax"
    Qarray=1
    continue
  fi
  if [ "$last" == "-arraymax" ]
  then
    Qarraymax="$iter"
    last=""
    continue
  fi
  #
  arguments_help+=( "${arguments[i]}" )
done
arguments=("${arguments_help[@]}")
therest=${arguments[@]}

# print inserted command
echoCOMMAND COMMAND: JKML "$@" >> output
if [ "$METHODsupercomputer" == "loc" ]
then
  loc=" -loc"
  Qarray=0
else
  loc=""
fi
if [ $Qsplit -gt 1 ]
then
  addsplit0=" $Qsplitargument $Qsplit "
fi
addsplit=""
calc=0
SCtasks=`echo "($Qsplit*$Qsplit+$Qsplit)/2" | bc`
if [ "$Qsplitargument" == "-finishsplit" ]
then 
  SCtasks=1
fi
for i in `seq 1 $Qsplit`
do
  for j in `seq 1 $i`
  do
    if [ $Qsplit -gt 1 ]
    then
      if [ "$Qsplitargument" == "-finishsplit" ]
      then
        if [ $j -ne $Qsplit ] || [ $i -ne $Qsplit ]
        then
          continue
        fi
      fi
      addsplit="$addsplit0 $i $j"
    fi
    if [ $Qarray -eq 1 ]
    then
      calc=`echo $calc+1 | bc`
      echo "source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../TOOLS/SCRIPTS/JKML.py $therest $addsplit" > .run$calc
      if [ $calc -eq $SCtasks ] 
      then
        if [ $Qarraymax -gt 0 ]
        then
          arraymax="%$Qarraymax"
        else
          arraymax=""
        fi
        SC_command=`echo $SC_command | sed "s/sbatch/sbatch --array=1-$SCtasks$arraymax/"`
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" >> output
        echo  "$SC_command 'sh .run\${SLURM_ARRAY_TASK_ID}'" > .run
        job=$(/bin/bash .run)
        if [ ! -z "$job" ] ;then echo $job;fi
        echo $job | awk '{print $4}'  >> .jobs.txt 
      fi
    else
      echo  "$SC_command \"source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../TOOLS/SCRIPTS/JKML.py $therest $addsplit\"" >> output
      echo  "$SC_command \"source ~/.JKCSusersetup.txt$loc;program_JKML $scriptpath/../TOOLS/SCRIPTS/JKML.py $therest $addsplit\"" > .run

      if [ $METHODsupercomputer == "loc" ]
      then
        /bin/bash .run | tee -a output
      else
        job=$(/bin/bash .run)
        if [ ! -z "$job" ] ;then echo $job;fi
        echo $job | awk '{print $4}'  >> .jobs.txt
      fi
    fi
  done
done

JKecho 1 "Calculations submitted or calculations done (-loc)."
exit

