#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that filter your data                          ##
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "Heaven is not such a place what everybody things it   ##
## is. #4% "   Jakub Kubecka                              ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

# print inserted command
echoCOMMAND COMMAND: $scriptfile "$@" >> output

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP
function help {
  eval "program_PYTHON2 $toolspath/SCRIPTS/DataFilter.py -help"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script

Qhelp=0
Quniq=0
arguments_help=""

# loop over all arguments
for ii in "${!arguments[@]}"
do
  i="${arguments[$ii]}"
  ### GENERAL ###
  ## help
  if [ "$i" == "-help" ] || [ "$i" == "--help" ]; then Qhelp=1;break;fi
  ### UNIQUENESS ###
  # uniqueness
  if [ "$i" == "-u" ] || [ "$i" == "-uniq" ]
  then
    Quniq=1
    continue
  fi
  # u1
  if [ "$last" == "-u1" ]
  then
    last=""
    u1=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u1" ] 
  then
    last="-u1"
    continue
  fi
  # u2
  if [ "$last" == "-u2" ]
  then
    last=""
    u2=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u2" ]
  then
    last="-u2"
    continue
  fi
  # u3
  if [ "$last" == "-u3" ]
  then
    last=""
    u3=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u3" ]
  then
    last="-u3"
    continue
  fi
  # sort 
  if [ "$last" == "-sort" ]
  then
    last=""
    Qs=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-sort" ] 
  then
    last="-sort"
    continue
  fi
  # folder
  L4=`echo $i | cut -c1-4`
  if [ -d "$i" ] && [ "$L4" == "SYS_" ]
  then
    folders+=" $i"
    continue
  fi
  ### SAMPLING AND FILTERING ###
  arguments_help+=" $i" 
  ###
done
arguments=$arguments_help

##############################################################################
################################ INPUT CHECK #################################
##############################################################################

# checking is input file is in this folder:
# going through the argument
if [ -z "$arguments" ]
then
  JKecho 0 "Missing input file. [${cfRED}EXITING${cfDEF}]"
  exit
fi
testfile=0
arguments_help=""
for i in $arguments
do
  # one of the argument should be file.dat containing the values
  text=`echo "aaaa$i" | rev | cut -c-4 | rev`
  if [ "$text" == ".dat" ] || [ "$text" == ".txt" ]
  then
    if [ -e "$i" ] 
    then
      testfile=`echo $testfile+1 | bc`
      analysedfile="$i"
      continue
    fi
  elif [ -e "results${i}.dat" ]
  then
    testfile=`echo $testfile+1 | bc`
    analysedfile="results${i}.dat"
    continue
  elif [ -e "collection${i}.txt" ]
  then
    testfile=`echo $testfile+1 | bc`
    analysedfile="collection${i}.txt"
    continue
  fi
  arguments_help+=" $i"
done
if [ -z "$analysedfile" ] || [ $testfile -ne 1 ]
then
  JKecho 0 "Either your input file does not exist or you are in wrong directory [${cfRED}EXITING${cfDEF}]."
  if [ $testfile -gt 1 ]; 
  then
    JKecho 0 "It is actually too many input files problem."
  fi 
  exit
fi
arguments="$arguments_help"

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

##############
# UNIQUENESS #
##############
if [ $Quniq -eq 1 ]
then
  ### file
  file=`echo $(basename $(basename $analysedfile .txt) .dat).dat`
  foldername=${file//".dat"/}
  foldername=${foldername//"results"/}
  foldername=${foldername//"collection"/}
  ###
  colfile=collection${foldername}.txt
  resfile=results${foldername}.dat
  WRONGresfile=collection${foldername}.dat
  movfile=movie${foldername}.xyz
  ###
  if [ ! -e "$colfile" ]
  then
    JKecho 0 "error - collection file ($colfile) does not exist. EXITING"
    exit
  fi
  #search="UNIQUENESS: $file"
  #if [ -e FILTER.txt ]
  #then
  #  if [ -z "$u1" ]; then u1=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $8}'`; fi
  #  if [ -z "$u2" ]; then u2=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $10}'`; fi
  #  if [ -z "$u3" ]; then u3=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $12}'`; fi
  #  if [ -z "$Qs" ]; then Qs=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $14}'`; fi
  #fi
  if [ -z "$u1" ]; then u1=2; fi
  if [ -z "$u2" ]; then u2=3; fi
  if [ -z "$u3" ]; then u3=1; fi
  if [ -z "$Qs" ]; then Qs=2; fi
  # send for uniqueness
  $toolspath/SCRIPTS/JKcollect "UNIQUENESS" $colfile $resfile $movfile $Qs $u1 $u2 $u3
  analysedfile=$resfile

  if [ "print" ==  "print" ]
  then
    lines=`wc -l $resfile | awk '{print $1}'`
    if [ $lines -lt 3 ]
    then 
      max=$lines
    else
      max=3
    fi
    printf ":::---- UNIQUENESS: first ${cfCYAN}$max${cfDEF} rows of file ${cfYELLOW}$file${cfDEF} ----:::\n" 
    N1=`echo $u1 $u2 $u3 | awk '{printf "%d",$1}'`
    N2=`echo $u1 $u2 $u3 | awk '{printf "%d",$2}'`
    N3=`echo $u1 $u2 $u3 | awk '{printf "%d",$3}'`
    if [ -e .JKCS5help ]; then rm .JKCS5help; fi
    for i in `seq 1 $max`
    do
      line=`head -n $i $resfile  | tail -n 1`
      O1=`echo $line | awk '{print $1}'` 
      O2=`echo $line | awk '{print $2}'` 
      O3=`echo $line | awk '{print $3}'` 
      O4=`echo $line | awk '{print $4}'`
      U2=`echo $O2 | awk -v v=$N1 '{printf "%.*f",v,int($1*10**v)/10**v}'` 
      U3=`echo $O3 | awk -v v=$N2 '{printf "%.*f",v,int($1*10**v)/10**v}'`
      if [ ! -z "$O4" ]
      then  
        U4=`echo $O4 | awk -v v=$N3 '{printf "%.*f",v,int($1*10**v)/10**v}'` 
      fi
      if [ ${#U2} -gt ${#O2} ]; then U2=$O2; fi
      if [ ${#U3} -gt ${#O3} ]; then U3=$O3; fi
      if [ ${#U4} -gt ${#O4} ]; then U4=$O4; fi
      printf    "$O1 ${cfGREEN}$U2${cfRED}${O2//$U2} ${cfGREEN}$U3${cfRED}${O3//$U3} ${cfGREEN}$U4${cfRED}${O4//$U4} ${cfDEF}\n" >> .JKCS5help
    done
    cat .JKCS5help | column -t 
    if [ -e .JKCS5help ]; then rm .JKCS5help; fi
  fi
fi

if [ ! -z "$arguments" ]
then
  command="program_PYTHON2 $toolspath/SCRIPTS/DataFilter.py $arguments $analysedfile"
  JKecho 2 "$command"
  eval "$command"
fi

JKecho 2 "Done."
