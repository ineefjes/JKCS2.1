#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that filter your data                          ##
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "Heaven is not such a place what everybody things it   ##
## is. #4% "   Jakub Kubecka                              ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

# print inserted command
echo "COMMAND: $scriptfile $@" >> output

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP
function help {
  eval "program_PYTHON2 $toolspath/SCRIPTS/DataFilter.py -help"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################

Qhelp=0
Quniq=0
#u1=2
#u2=3
#u3=3
#Qs=3
arguments_help=""

# loop over all arguments
for ii in "${!arguments[@]}"
do
  i="${arguments[$ii]}"
  ### GENERAL ###
  ## help
  if [ "$i" == "-help" ] || [ "$i" == "--help" ]; then Qhelp=1;break;fi
  # partition
  if [ "$last" == '-par' ]
  then
    last=''
    parameters+=" -p $i"
    continue
  fi
  if [ "$i" == "-par" ] || [ "$i" == "-partition" ]
  then
    last="-par"
    continue
  fi
  ## time
  if [ "$last" == "-time" ]
  then
    last=""
    parameters+=" --time $i"
    continue
  fi
  if [ "$i" == "-time" ] || [ "$i" == "-t" ]
  then
    last="-time"
    continue
  fi
  # programs
  if [ "$last" == '-programs' ]
  then
    last=''
    if [ "$i" == 2 ]
    then
      Qprograms="programs2.txt"
    else
      Qprograms="$i"
    fi
    continue
  fi
  if [ "$i" == "-programs" ]
  then
    last='-programs'
    continue
  fi
  ##
  ### UNIQUENESS ###
  # uniqueness
  if [ "$i" == "-u" ] || [ "$i" == "-uniq" ]
  then
    Quniq=1
    continue
  fi
  # u1
  if [ "$last" == "-u1" ]
  then
    last=""
    u1=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u1" ] 
  then
    last="-u1"
    continue
  fi
  # u2
  if [ "$last" == "-u2" ]
  then
    last=""
    u2=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u2" ]
  then
    last="-u2"
    continue
  fi
  # u3
  if [ "$last" == "-u3" ]
  then
    last=""
    u3=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-u3" ]
  then
    last="-u3"
    continue
  fi
  # sort 
  if [ "$last" == "-sort" ]
  then
    last=""
    Qs=$i
    Quniq=1
    continue
  fi
  if [ "$i" == "-sort" ] 
  then
    last="-sort"
    continue
  fi
  # folder
  L4=`echo $i | cut -c1-4`
  if [ -d "$i" ] && [ "$L4" == "SYS_" ]
  then
    folders+=" $i"
    continue
  fi
  ### SAMPLING AND FILTERING ###
  arguments_help+=" $i" 
  ###
done
arguments=$arguments_help

# checking is input file is in this folder:
# going through the argument
testfile=0
for i in $arguments
do
  # one of the argument should be file.dat containing the values
  text=`echo "aaaa$i" | rev | cut -c-4 | rev`
  if [ "$text" == ".dat" ] || [ "$text" == ".txt" ]
  then
    if [ -e $i ] 
    then
      testfile=`echo $testfile+1 | bc`
      folders=./
      break
    else
      folders=`ls -d SYS*/ 2>/dev/null`
    fi
  fi
done
if [ -z "$arguments" ]
then
  folders=./
fi

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

##################################
## LOOP OVER ALL FOLDERS
##################################
for folder in $folders
do
  fromwhere=`echo "${PWD##*/}"`
  JKecho 2 "$fromwhere: Entering folder $folder"
  cd $folder

  ########################
  # going through all arguments
  testfile=0
  file=""
  for i in $arguments
  do
    # one of the argument should be file.dat containing the values
    text=`echo "aaaa$i" | rev | cut -c-4 | rev`
    if [ "$text" == ".dat" ]
    then
      if [ ! -e $i ] 
      then
        JKecho 0 "error - $i does not exist. EXITING"
        exit
      fi
      testfile=`echo $testfile+1 | bc`
      file+=" $i"
    fi
  done
  # if no .dat file, I will check at least for .txt file
  if [ $testfile -eq 0 ]
  then
    if [ $Quniq -eq 1 ]
    then
      for i in $arguments
        do
        # one of the argument should be file.dat containing the values
        text=`echo "aaaa$i" | rev | cut -c-4 | rev`
        if [ "$text" == ".txt" ]
        then
          if [ ! -e $i ]
          then
            JKecho 0 "error - $i does not exist. EXITING"
            exit
          fi
          testfile=`echo $testfile+1 | bc`
          file+=" $i"
        fi
      done
    fi
  fi
  # checking amount of input files
  if [ $testfile -eq 0 ]
  then
    JKecho 0 " error - input file is missing (the one with .dat extension). EXITING"
    exit
  fi 
  if [ $testfile -gt 2 ]
  then
    JKecho 0 "error - too many input files ($testfile) (those with .dat extension) (RESELECT IS DISABLED NOW). EXITING"
    exit
  fi
  ##############
  # UNIQUENESS #
  ##############
  if [ $Quniq -eq 1 ]
  then
    #file
    file=`echo $(basename $(basename $file .txt) .dat).dat`
    foldername=${file//".dat"/}
    foldername=${foldername//"results"/}
    foldername=${foldername//"collection"/}
    #foldername=`echo $file | cut -c8- | rev | cut -c5- | rev` 
    colfile=collection${foldername}.txt
    movfile=movie${foldername}.xyz
    if [ ! -e "$colfile" ]
    then
      JKecho 0 "error - collection file ($colfile) does not exist. EXITING"
      exit
    fi
    search="UNIQUENESS: $file"
    if [ -e FILTER.txt ]
    then
      if [ -z "$u1" ]; then u1=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $8}'`; fi
      if [ -z "$u2" ]; then u2=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $10}'`; fi
      if [ -z "$u3" ]; then u3=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $12}'`; fi
      if [ -z "$Qs" ]; then Qs=`grep "$search" FILTER.txt | tail -n 1 | awk '{print $14}'`; fi
    fi
    if [ -z "$u1" ]; then u1=2; fi
    if [ -z "$u2" ]; then u2=3; fi
    if [ -z "$u3" ]; then u3=-1; fi
    if [ -z "$Qs" ]; then Qs=3; fi
    # send for uniqueness
    $toolspath/SCRIPTS/JKcollect --- "UNIQUENESS" $colfile $file $movfile $Qs $u1 $u2 $u3
  fi

  ###############################
  ### FILTERING AND SELECTING ###
  ###############################
  # no filtering or sampling
  #arg=`Felements $arguments`
  #if [ "$arg" -eq "$testfile" ]
  #then
  #  cd ..
  #  continue
  #fi 
  # running the job
  #if [ $testfile -eq 1 ]
  #then
  command="program_PYTHON2 $toolspath/SCRIPTS/DataFilter.py $arguments"
  #else
  #  #this case: testfile=2 DISABLED NOW, SEE ABOVE
  #  command="$toolspath/SCRIPTS/reselectfromfromfilter.sh $arguments"
  #fi
  # checking queue program
  #if [ -z $programSendToQueue1part ] && [ -z $programSendToQueue2part ]
  #then
    # calculate
  eval "$command"
  #else
    # calculate ... send to queue
  #  queue=`eval $programSendToQueue1part $parameters $programSendToQueue2part "$command"`
  #  echo "$scriptfile: $queue"
  #  echo $queue | awk '{print $4}' >> $queuefile
  #fi
  ##################### 
  cd ..
done

JKecho 2 "Done."
