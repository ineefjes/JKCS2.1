#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that collect your results from JKCS folders    ##
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "It's funny that I can call on girlfrien Lol, she does ##
## not know if I am laughing at her."       Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

# print inserted command
echoCOMMAND COMMAND: $scriptfile "$@" >> output

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP

function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "Program that collect your results from JKCS folders\n"
  printf """
  $scriptfile ${cfCYAN}[OPTIONS(s)] [FOLDER]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ............ print this help and exit
  
  ${cfMAGENTA}OUTPUTS:${cfDEF} 
    -collection[${cfBLUE}FOLDER${cfDEF}].txt:
      XYZ_full_path  Radius_Of_Gyration  Electronic_Energy  
    -results[${cfBLUE}FOLDER${cfDEF}].dat:
       =collection file with removed redundant structures
       =sorted with respect to energy
    -movie[${cfBLUE}FOLDER${cfDEF}].xyz:
       =Molden usable file to visualize the structures

  ${cfMAGENTA}ADITIONAL OPTIONS:${cfDEF}
   -dip ............. + dipoles
   -g,-gibbs ........ + Gibbs free energy
   -gh,-gibbsh ...... + Gibbs free energy (GoodVibes corrected)
    ${cfRED}OR${cfDEF}
   define by yourself using JKgaussstat commands: (see JKgaussstat --help)
                 !! but then, you need to define also the path etc. !!
		 e.g., $scriptfile DFT -p -rg -el -dip -pol 
 
  ${cfMAGENTA}EXAMPLES:${cfDEF}
    
    $scriptfile ABC                         || [xyz] [Angstrom] [kJ/mol]
    $scriptfile XTB -dip                    || [xyz] [Angstrom] [hartree] [Debye]
    $scriptfile DFT_HIGH -loc               || [xyz] [Angstrom] [hartree]
    $scriptfile DFT_HIGH_freq -gibbs -loc   || [xyz] [Angstrom] [hartree] [hartree]
    $scriptfile XTB -p -rg -el -dip         || [xyz] [Angstrom] [hartree] [Debye] \n"""
  printf "#################################################################\n"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
################################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# program 
program=XTB
method=XTB
#JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load amount of molecules
if [ -e $inputfile ]
then
  M=`head -n 1 $inputfile | awk '{print $6}'`
else
  JKecho 0 "No ${cfYELLOW}${inputfile}${cfDEF} file. (${cfRED}Assuming M=1 if needed!!!${cfDEF})"
  M=1;
fi

# -loc or load supercomputer parameters
JKloadsupercomputer

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script
#basically search just for the FOLDER.
Qjpt=1 #jobs per task

last=""
# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  firstletter=`echo $iter | cut -c 1`
  if [ "$firstletter" == "-" ] || [ ! -z "$last" ]
  then
    # Jobs per task
    if [ "$iter" == "-jpt" ]
    then
      last="-jpt"
      continue
    fi
    if [ "$last" == "-jpt" ];
    then
      last=""
      Qjpt=$iter
      continue
    fi
    arguments_help+=( "${arguments[i]}" )
  else
    if [ -d "$iter" ]
    then
      method="${iter%/*}"
    else
      arguments_help+=( "${arguments[i]}" )
    fi
  fi
done
arguments=("${arguments_help[@]}")

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

#FILES AND FOLDER NAMES DECLARATION
JKecho 1 "Collecting data from ${cfBLUE}${method}${cfDEF} folder."
#files
savefile="$collectionfile${method}.txt"
resultfile="$resultsfile${method}.dat"
movie="$moviefile${method}.xyz"
if [ -e $savefile ]; then rm $savefile; fi
touch $savefile
if [ -e $resultfile ]; then rm $resultfile;fi
if [ -e $movie ]; then rm $movie;fi
JKecho 2 "Output files checked (${cfYELLOW}$savefile${cfDEF},${cfYELLOW}$resultfile${cfDEF},${cfYELLOW}$movie${cfDEF})"

#SUBFOLDER DEFINITION
if [ -d ${method}/${name}-LM ]
then
  subfolders="${method}/${name}-LM"
else
  subfolders=`ls -d ${method}/${method}_*/calc-LM | xargs`
  if [ -z "$subfolders" ]
  then
    subfolders="${method}"
  fi
fi
JKecho 2 "Subfolder(s) storing the data: ${cfBLUE}${subfolders}${cfDEF}"

#DID SUBFOLDER FINISHED CORRECTLY ???
JKecho 2 "Is everything done there?"
###
testdone=`JKcheck $method | awk '{print $5}'`
if [ "$testdone" != "100.00" ] && [ "$testdone" != "" ]
then
  JKecho 0 "Apparently the subfolder ${cfBLUE}${method}${cfDEF} is still running."
  JKecho 0 "   some jobs or was not finished correctly. Do you want to shut down"
  JKecho 0 "   Do not await these jobs and collect the data? [yes/no] "
  read answer
  if [ "$answer" == "y" ] || [ "$answer" == "yes" ] || [ "$answer" == "Y" ] || [ "$answer" == "YES" ] || [ "$answer" == "Yes" ]
  then
    JKecho 1 "Ok, I will continue."
    rm $method/.* 2>/dev/null
    #rm ./.* 2>/dev/null
  else 
    JKecho 0 "Collection will not be performed here! [${cfRED}EXITING${cfDEF}]"
    exit
  fi
else
  rm $method/.* 2>/dev/null
fi
###

######### CHECKING SOME ARGUMENTS:
# loop over all arguments
Qs=3
Qu="2 3"
arguments_hpass=()
arguments_hcatch=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  if [ "$iter" == "-gibbs" ] || [ "$iter" == "-gibbsh" ] || [ "$iter" == "-g" ] || [ "$iter" == "-gh" ]
  then
    Qs=4
    Qu+=" 3"
    arguments_hcatch+=( "$iter" )
    continue 
  fi
  if [ "$iter" == "-dip" ]
  then
    Qu+=" 1"
    arguments_hcatch+=( "$iter" )
    continue
  fi
  arguments_hpass+=( "$iter" )
done
#arguments=("${arguments_help[@]}")
hpass=${arguments_hpass[@]}
hcatch=${arguments_hcatch[@]}
if [ -z "$hpass" ]
then
  arguments=( "-pXYZ" )
  arguments+=( "-rg" )
  arguments+=( "-el" )
  arguments+=( "${arguments_hcatch[@]}" )
else
  Qs=-1
  Qu=""
fi

### GOING THROUGH ALL SUBBFOLDERS
Qjpt_iter=0
jobscount=0
JKecho 2 "Going through all subfolders: ${cfBLUE}$subfolders${cfDEF}"
for subfolder in $subfolders
do
  Qjpt_iter=`echo $Qjpt_iter + 1 |bc`
  ## ENTERING FOLDER
  JKecho 3 "    Analyzing subfolder ${cfBLUE}$subfolder${cfDEF}."
  cd $subfolder
  #################################################################
  # command ... it looks crazy but it has to be done like this due to ""
  #command="$toolspath/SCRIPTS/JKcollect RUN $savefile  "${arguments[@]}
  #printf "$command" > run${scriptfilecommand}.sh
  echoCOMMAND $toolspath/SCRIPTS/JKcollect RUN $savefile "${arguments[@]}">run${scriptfilecommand}.sh
  commandTODO="cd $PWD; sh run${scriptfilecommand}.sh;"
  cd $currentdirpath 
  if [ "$Qperform" == 2 ]
  then
    echo $commandTODO >> $method/.crealTODO.txt
    echo $commandTODO >> $method/commands_TODO.txt
  else
    echo $commandTODO >> $method/.Qjpt_commands_TODO.txt
    if [ $Qjpt_iter -eq $Qjpt ]
    then
      cat $method/.Qjpt_commands_TODO.txt | xargs -d$'\n' >> $method/commands_TODO.txt
      rm $method/.Qjpt_commands_TODO.txt
      Qjpt_iter=0
      jobscount=`echo $jobscount+1|bc`
    fi
  fi
  JKecho 3 "    Command ${cfMAGENTA}$commandTODO${cfDEF} [${cfCYAN}$command${cfDEF}] written to ${cfBLUE}$method${cfDEF}/${cfYELLOW}commands_TODO.txt${cfDEF}"
done
if [ -e $method/.Qjpt_commands_TODO.txt ]
then
  cat $method/.Qjpt_commands_TODO.txt | xargs -d$'\n' >> $method/commands_TODO.txt
  rm $method/.Qjpt_commands_TODO.txt
  jobscount=`echo $jobscount+1|bc`
fi
###

### PREPARING SUBMITTING FOR ALL JOBS IN METHOD FOLDER
cd $currentdirpath/$method
if [ "$Qperform" == 2 ]; then jobscount=`echo $subfolders | xargs -n 1 | wc -l`; fi
JKecho 2 "Counting number of jobs: ${cfGREEN}$jobscount${cfDEF}"

if [ "$Qperform" == 2 ]
then
  echo "1 $method/" >> ../.link.txt
fi

### PREPARING SUBMITTING FOR THE CONTROL JOB WHICH COLLECTS ALL SUBCOLLECTIONS
#  savefile=$2
#  #I DO NOT NEED THE GUYS BELOW THEY GO TO UNIQUENESS
#  resultfile=$3                                    ##
#  movie=$4                                         ##
#  Qs=$5                                            ## 
#  #UNIQUENNESS                                     ##
#  args=${@:6}
JKecho 2 " + Sending to CONTROL collection." 
#
commandTODO="while [ 1 -eq 1 ]; do testdone=\`JKcheck $method -num\` ; if [ \"\$testdone\" == \"100.00\" ]; then $toolspath/SCRIPTS/JKcollect CONTROL $savefile $resultfile $movie $Qs $Qu; break; else sleep 1; fi; done "
if [ "$Qperform" == 2 ]
then
  echo $commandTODO >> ../.crealTODO.txt
fi

### Sending jobs ###
JKecho 2 "Counting amount of jobs: ${cfBLUE}$jobscount${cfDEF} (max possible ${cfBLUE}$SCtasks${cfDEF})"
if [ $jobscount -le $SCtasks ]
then
  SCtasks=$jobscount
else
  if [ "$Qperform" != 2 ]  && [ "$METHODsupercomputer" != "loc" ]
  then
    JKecho 0 "Max number of jobs to be sent is greater then allowed."
    JKecho 0 "Either use [${cfCYAN}-maxtasks${cfDEF} ${cfBLUE}$jobscount${cfDEF}] option or use ${cfCYAN}JKperform2${cfDEF} option."
    exit
  fi
  SCtasks=$jobscount
fi
JKecho 2 "Tasks used: ${cfBLUE}$SCtasks${cfDEF}"

##Qlinking=0
##if [ $Qlinking -eq 1 ]
##then
##  echo "LINK 1 $currentdirpath" >> commands_TODO.txt
##  if [ -e ../commands_TODO.txt ]
##  then
##    cp ../commands_TODO.txt ../commands_TODO.txt_help
##    echo "LINK 1 $currentdirpath/$method" > ../commands_TODO.txt
##    cat ../commands_TODO.txt_help >> ../commands_TODO.txt
##    rm ../commands_TODO.txt_help
##  else
##    echo "LINK 1 $currentdirpath/$method" > ../commands_TODO.txt
##  fi
##fi

### THE SUBMITTING ITSELF
for i in `seq $SCtasks -1 1`
do
  if [ "$Qperform" == 2 ]
  then
    $SC_command sh $toolspath/SCRIPTS/JKperform2.sh
    echo "$SC_command sh $toolspath/SCRIPTS/JKperform2.sh" >> output
  else
    echo  "$SC_command '`tail -n $i commands_TODO.txt | head -n 1`'" >> output
    JKecho 3 "Submitting  RUN command"
    echo  "$SC_command '`tail -n $i commands_TODO.txt | head -n 1`'" > .run
    job=$(/bin/bash .run)
    #job=$(eval `cat .run`)
    #job=$(eval $SC_command "`tail -n $i commands_TODO.txt | head -n 1`")
    if [ ! -z "$job" ]; then echo $job; fi
    echo $job | awk '{print $4}'  >> .jobs.txt
  fi
done
cd $currentdirpath

if [ "$Qperform" != 2 ]
then
  JKecho 3 "Command ${cfMAGENTA}$commandTODO${cfDEF}"
  echo  "$SC_command '$commandTODO'" >> output
  JKecho 3 "Submitting CONTROL command"
  echo  "$SC_command '$commandTODO'" > .run
  job=$(/bin/bash .run)
  #job=$(eval $SC_command "$commandTODO")
  if [ ! -z "$job" ];then echo $job; fi
  if [ "$METHODsupercomputer" != "loc" ]
  then
    echo $job | awk '{print $4}'  >> .jobs.txt  
  fi
fi
JKecho 1 "Subfolder finished/submitted."









