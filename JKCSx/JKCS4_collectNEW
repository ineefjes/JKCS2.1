#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program that collect your results from JKCS folders    ##
## To understand program run help:                        ##
##       for help use arguement -help                     ##
############################################################
## "It's funny that I can call on girlfrien Lol, she does ##
## not know if I am laughing at her."       Jakub Kubecka ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

# print inserted command
echoCOMMAND COMMAND: $scriptfile "$@" >> output

###############################################################################
###################################### HELP ###################################
###############################################################################

### THIS IS HELP

function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "Program that collect your results from JKCS folders\n"
  printf """
  $scriptfile ${cfCYAN}[OPTIONS(s)] [FOLDER]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ............ print this help and exit
   
  ${cfGREEN}New Colective Coordinates: (3rd column)${cfDEF}
   -ncc ............. + something assuming hydrogen bond lengths
   -dip ............. + dipoles
   -g,-gibbs ........ + Gibbs free energy
   -gh,-gibbsh ...... + Gibbs free energy (GoodVibes)
   -b,-bonds [ATOM] [thresh] .................... ++bonds with spec. atom
   -b2,-bonds2 [ATOM1] [ATOM2] [thresh] ......... ++bonds with spec. atoms
   -b3,-bonds3 [ATOM1] [ATOM2] [ATOM3] [thresh] . ++bonds with spec. atoms
 
  ${cfRED}Some DLPNO corrected results [NOT TESTED]${cfDEF}
   -dlpno ........... needs files from -dlpno1 & -dlpno2
   -dlpno1 \"X\" ...... set dlpno file       [default: resultsDLPNO.dat]
   -dlpno2 \"X\" ...... set free energy file [default: resultsDFT_HIGH_freq.dat]
           
  ${cfMAGENTA}EXAMPLES:${cfDEF}
    
    $scriptfile DFT_HIGH_freq -gibbs -loc
    $scriptfile XTB -time 1:00:00
    $scriptfile DFT_HIGH -loc\n"""
  printf "#################################################################\n"
  exit
}

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
################################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help

# program 
program=XTB
method=XTB
#JKloadprogram

# check for folderbasename_something arguments and in case enter directories
JKloaddirs
currentdir=${PWD##*/}
currentdirpath=$PWD

# load amount of molecules
if [ -e $inputfile ]
then
  M=`head -n 1 $inputfile | awk '{print $6}'`
else
  JKecho 0 "No ${cfYELLOW}${inputfile}${cfDEF} file. (${cfRED}Assuming M=1 if needed!!!${cfDEF})"
  M=1;
fi

# -loc or load supercomputer parameters
JKloadsupercomputer

###############################################################################
################################  USER INPUT  #################################
################################ DO NOT TOUCH #################################
###############################################################################
#reading arguments important for this script
#basically search just for the FOLDER.

# loop over all arguments
arguments_help=()
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  firstletter=`echo $iter | cut -c 1`
  if [ "$firstletter" == "-" ]
  then
    arguments_help+=( "${arguments[i]}" )
  else
    if [ -d "$iter" ]
    then
      method="${iter%/*}"
    else
      arguments_help+=( "${arguments[i]}" )
    fi
  fi
done
arguments=("${arguments_help[@]}")

###############################################################################
################################ MAIN PROGRAM #################################
################################ DO NOT TOUCH #################################
###############################################################################

#FILES AND FOLDER NAMES DECLARATION
JKecho 1 "Collecting data from ${cfBLUE}${method}${cfDEF} folder."
#files
savefile="$collectionfile${method}.txt"
resultfile="$resultsfile${method}.dat"
movie="$moviefile${method}.xyz"
if [ -e $savefile ]; then rm $savefile; fi
touch $savefile
if [ -e $resultfile ]; then rm $resultfile;fi
if [ -e $movie ]; then rm $movie;fi
JKecho 2 "Output files checked (${cfYELLOW}$savefile${cfDEF},${cfYELLOW}$resultfile${cfDEF},${cfYELLOW}$movie${cfDEF})"

#SUBFOLDER DEFINITION
if [ -d ${method}/${name}-LM ]
then
  subfolders="${method}/${name}-LM"
else
  subfolders=`ls -d ${method}/${method}_*/calc-LM | xargs`
  if [ -z "$subfolders" ]
  then
    subfolders="${method}"
  fi
fi
JKecho 2 "Subfolder(s) storing the data: ${cfBLUE}${subfolders}${cfDEF}"

#DID SUBFOLDER FINISHED CORRECTLY ???
JKecho 2 "Is everything done there?"
###
testdone=`JKcheck $method | awk '{print $5}'`
if [ "$testdone" != "100.00" ] && [ "$testdone" != "" ]
then
  JKecho 0 "Apparently the subfolder ${cfBLUE}${method}${cfDEF} is still running."
  JKecho 0 "   some jobs or was not finnished correctly. Do you want to shut down"
  JKecho 0 "   awaiting jobs there and collect the data? [yes/no] "
  read answer
  if [ "$answer" == "y" ] || [ "$answer" == "yes" ] || [ "$answer" == "Y" ] || [ "$answer" == "YES" ] || [ "$answer" == "Yes" ]
  then
    rm $method/.* 2>/dev/null
    rm ./.* 2>/dev/null
  else 
    JKecho 0 "Collection will not be performed here! [${cfRED}EXITING${cfDEF}]"
    exit
  fi
else
  rm $method/.* 2>/dev/null
fi
###

### GOING THROUGH ALL SUBBFOLDERS
JKecho 2 "Going through all subfolders."
for subfolder in $subfolders
do
  ## ENTERING FOLDER
  JKecho 3 "    Analyzing subfolder ${cfBLUE}$subfolder${cfDEF}."
  cd $subfolder
  #################################################################
  # command
  command="$toolspath/SCRIPTS/JKcollect RUN $savefile ${arguments[$i]}"
  printf "$command" > run${scriptfilecommand}.sh
  commandTODO="cd $PWD; sh run${scriptfilecommand}.sh;"
  cd $currentdirpath
  echo $commandTODO >> $method/commands_TODO.txt
  echo $commandTODO >> $method/.crealTODO.txt
  JKecho 3 "    Command $commandTODO [$command] written to ${cfBLUE}$method${cfDEF}/${cfYELLOW}commands_TODO.txt${cfDEF}"
  ##
done
###

### PREPARING SUBMITTING FOR ALL JOBS IN METHOD FOLDER
cd $currentdirpath/$method
jobscount=`echo $subfolders | xargs -n 1 | wc -l `
JKecho 2 "Counting number of jobs: ${cfGREEN}$jobscount${cfDEF}"

echo "1 $method/" >> ../.link.txt

### PREPARING SUBMITTING FOR THE CONTROL JOB WHICH COLLECTS ALL SUBCOLLECTIONS
JKecho 2 " + Sending to CONTROL collection." 
commandTODO="while [ 1 -eq 1 ]; do testdone=\`JKcheck $method | awk '{print \$5}'\`;if [ \"\$testdone\" == \"100.00\" ]; then $toolspath/SCRIPTS/JKcollect --- CONTROL $method $savefile $Qncc $resultfile $movie; break; else sleep 1; fi; done"
echo $commandTODO >> ../.crealTODO.txt

### Sending jobs ###
if [ $jobscount -lt $SCtasks ]
then
  SCtasks=$jobcount
fi
JKecho 2 "Tasks used: ${cfBLUE}$SCtasks${cfDEF}"

##Qlinking=0
##if [ $Qlinking -eq 1 ]
##then
##  echo "LINK 1 $currentdirpath" >> commands_TODO.txt
##  if [ -e ../commands_TODO.txt ]
##  then
##    cp ../commands_TODO.txt ../commands_TODO.txt_help
##    echo "LINK 1 $currentdirpath/$method" > ../commands_TODO.txt
##    cat ../commands_TODO.txt_help >> ../commands_TODO.txt
##    rm ../commands_TODO.txt_help
##  else
##    echo "LINK 1 $currentdirpath/$method" > ../commands_TODO.txt
##  fi
##fi

### THE SUBMITTING ITSELF
for i in `seq 1 $SCtasks`
do
  $SC_command sh $toolspath/SCRIPTS/JKperform2.sh
  #echo "$SC_command"
done
cd $currentdirpath
JKecho 1 "Subfolder finished/submitted."

