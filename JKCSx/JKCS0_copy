#!/bin/bash
############################################################
## JAKUB KUBECKA 2018                                     ##
## Program for preparin input file for user setup         ##
## See help:                                              ##
##        JKCS0_copy -help                                ##
############################################################
## "Nowadays time period should be called silicon era ... ##
## era of sil. aerosols, el. devices and great boobs." JK ##
############################################################

###############################################################################
############################### DECLARATIONS ##################################
###############################################################################

# locate TOOLS path
scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../TOOLS"

# load names
source $toolspath/LOADING/names.txt
# load functions
source $toolspath/LOADING/functions.sh
# load user setup
source ~/.JKCSusersetup.txt

path1="$toolspath/STRUCTURES/ABC"
path2="$toolspath/STRUCTURES/JACOB"
path3="$toolspath/STRUCTURES/EXPERIMENTAL"
path4="$toolspath/STRUCTURES/ABC_XTB"

###############################################################################
###################################### HELP ###################################
###############################################################################

function help {
  printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "  It copies input files for JKCS to your folder.\n"
  printf """
  $scriptfile ${cfCYAN}[OPTION(s)] [STRUCTURE(s)]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ........ print this help
   -helpxyz ..... print the ABC_XTB help

  ${cfMAGENTA}STRUCTURES:${cfDEF}
   w ............ water (H2O,OH-,H+)
   aq ........... water (H20)
   
   nta .......... nitric acid
   sa ........... sulphuric acid
   msa .......... methanesulfonic acid
   fa ........... formic acid
   aca .......... acetic acid
   pyru ......... pyruvic acid
   cla .......... chloric acid
   pcla ......... perchloric acid

   am ........... ammonia
   ma ........... methylamine
   dma .......... dimethylamine
   tma .......... trimethylamine
   eda .......... ethylendiamine
   gd ........... guanidine
   urea ......... urea
   
   cd ........... carbon dioxide
   m ............ methane
   buoh ......... butanol
   ar ........... argon
   ne ........... neon
   he ........... helium 
  
   h ............ proton (+)
   na ........... sodium (+)
   cl ........... chloride (-)
  
   ica .......... iodic acid
   isa .......... iodous acid
   ip ........... iodine pentoxide

  ${cfMAGENTA}EXAMPLES:${cfDEF}

	$scriptfile ${cfGREEN}sa gd ${cfDEF} \n"""
  printf "#################################################################\n"
  exit
}

function helpxyz {
    printf "#################################################################\n"
  printf "$scriptfile HELP:\n"
  printf "  It copies input files for JKCS to your folder.\n"
  printf """
  $scriptfile ${cfCYAN}[OPTION(s)] [STRUCTURE(s)]${cfDEF}

  ${cfMAGENTA}OPTIONS:${cfDEF}
   -help ........ print the original help
   -helpxyz ..... print this help

  ${cfMAGENTA}STRUCTURES:${cfDEF}
   XYZaq ........... water (H20)
   XYZbuoh ......... butanol with bonding
  
   XYZh ............ proton (+)
   XYZli ........... lithium (+)
   XYZna ........... sodium (+)
   XYZk ............ kalium (+)

   XYZf ............ fluoride (-)
   XYZcl ........... chloride (-)
   XYZbr ........... bromide (-)
   XYZi ............ iodide (-)

  ${cfMAGENTA}EXAMPLES:${cfDEF}

        $scriptfile ${cfGREEN}XYZli XYZbuoh ${cfDEF} \n"""
  printf "#################################################################\n"
  exit
}

###############################################################################
################################## ARGUMENTS ##################################
###############################################################################

arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

# check what everything wants user to print
JKloadprint

# load colours
JKloadcolours           # some coloured output

# check -help option
JKloadhelp             # check if user asks for -help
JKloadhelp xyz

###############################################################################
################################ MAIN PROGRAM #################################
###############################################################################
###  CONTENT  ###
# controling path
# forming input file
# function add > end line in input file
# go through all user arguments
# preparing command file
# informing user what to do next
#--------------------------------------
JKecho 2 "Main program start."

#
JKecho 2 "Controling existence of paths $path1 and $path2"
if [ ! -d $path1 ] || [ ! -d $path2 ]
then 
  JKecho 1 "Sorry, the path ${cfYELLOW}$path1${cfDEF}"
  JKecho 1 "  or the path ${cfYELLOW}$path2${cfDEF} do not exist!"
  JKecho 1 "  Never mind, BUT setup directories in ${cfYELLOW}${userinputfile}${cfDEF} properly."
fi

# forming input file
JKecho 2 "Checking length of arguments: ${arguments[@]}"
arguments_length=`echo "${#arguments[@]}"`
if [ $arguments_length -eq 0 ]; then arguments_length=2; fi
for i in `seq 1 $arguments_length`; 
do
  if [ $i -eq 1 ]
  then
    composition_example="1"
  else
    composition_example+="_1"
  fi
done 
JKecho 2 "Composition_example formed: $composition_example"

#
JKecho 2 "Creating file $userinputfile"
echo """######################################################
## SUPERCOMPUTER PARAMETERS                         ##
## Number of Combinations - NoC                     ##""" > $userinputfile
#######################################################
### MAXTASKS CPU NODES REQ.TIME  PARTITION MEMPERCPU ##
#======================================================
#ABC  NoC     1    1   72:00:00   serial     4000
#XTB  NoC     1    1   72:00:00   serial     4000
#DFT  100     8    1   72:00:00   serial     4000
#CC   100     8    1   330:00:00  longrun    4000
#-loc 1       1    1   -          -          -
#======================================================
#printf "\b\b\b" >> $userinputfile

echo_SCpartition >> $userinputfile

echo """
#####################################
## SYSTEM CHARGE AND MULTIPLICITY  ##
#####################################
TotalCharge        0  
TotalMultiplicity  1  

###################################################################
## COMPOSITION:                                                  ##
## e.g.: 1_1_2 1_2_1 1_3                                         ##                  
## e.g.: 1_3-6             = 1_3 1_4 1_5 1_6                     ##
## e.g.: (1,3,5)_1         = 1_1 3_5 5_1                         ##
## e.g.: (2,4)_1-3_1       = 2_1_1 4_1_1 2_2_1 4_2_1 2_3_1 4_3_1 ## 
## e.g.: (0,2)_x_1         = 0_0_1 2_0_1 1_1_1 0_2_1  #see:3_x_x ## 
## e.g.: 1_1_F2            = 1_1_0-2 #protons# to fulfill charge ## 
###################################################################
Composition     $composition_example  `echo $composition_example | sed 's/1/2/g'`

######################################
## STRUCTURES OF BUILDING MONOMERS: ##
######################################
# name | q | path """ >> $userinputfile

# function add > end line in input file 
function add {
  JKecho 2 "Adding link for $1 in the end of $userinputfile."
  what=`echo $1 | awk '{print tolower($0)}'`
  case ${what} in
  "a"|"am") echo   "  am     0   $path1/nh3.xyz"    >> $userinputfile
            echo   "  am     1   $path1/nh4.xyz"         >> $userinputfile
            ;;
  "hno3"|"nta") echo   "  nta    0   $path1/hno3.xyz"  >> $userinputfile
                echo   "  nta   -1   $path1/no3.xyz"      >> $userinputfile
                ;;
  "sa") echo  "  sa     0   $path2/sa.xyz"          >> $userinputfile
        echo  "  sa     0   $path2/h2so4_cis.xyz"   >> $userinputfile
        echo  "  sa    -1   $path1/hso4.xyz"        >> $userinputfile
        echo  "  sa    -2   $path1/so4.xyz"         >> $userinputfile
        ;;
  "gd") echo  "  gd     0   $path2/g.xyz"           >> $userinputfile
        echo  "  gd     1   $path1/guanidinium.xyz" >> $userinputfile
        ;;
  "w") echo   "  w     -1   $path1/oh.xyz"          >> $userinputfile
       echo   "  w      0   $path2/aq.xyz"          >> $userinputfile
       echo   "  w      1   $path2/aqp.xyz"         >> $userinputfile
       ;;
  "aq") echo  "  w      0   $path2/aq.xyz"          >> $userinputfile
       ;;
  "msa") echo "  msa    0   $path2/msa.xyz"         >> $userinputfile
         echo "  msa   -1   $path2/msam.xyz"        >> $userinputfile
         ;;
  "fa")  echo "  fa     0   $path2/fa.xyz"          >> $userinputfile
         echo "  fa    -1   $path2/fa-.xyz"         >> $userinputfile
         ;;
  "aca") echo "  aca    0   $path2/aca.xyz"         >> $userinputfile
         echo "  aca   -1   $path2/acc.xyz"         >> $userinputfile
         ;;
  "pyru") echo "  pyru   0   $path2/PyA_Cc.xyz"     >> $userinputfile
          echo "  pyru   0   $path2/PyA_Ct.xyz"     >> $userinputfile
          echo "  pyru   0   $path2/PyA_Tc.xyz"     >> $userinputfile
          echo "  pyru   0   $path2/PyA_Tt.xyz"     >> $userinputfile
          echo "  pyru  -1   $path2/PyAte.xyz"      >> $userinputfile
          ;;
  "cla") echo "  cla    0   $path2/cla.xyz"         >> $userinputfile
         echo "  cla   -1   $path2/cla-.xyz"        >> $userinputfile
         ;;
  "pcla") echo "  pcla   0   $path2/pcla.xyz"       >> $userinputfile
          echo "  pcla  -1   $path2/pcla-.xyz"      >> $userinputfile
         ;;
  "ma") echo  "  ma     0   $path2/ma.xyz"          >> $userinputfile
        echo  "  ma     1   $path2/mah.xyz"         >> $userinputfile
        ;;
  "dma") echo "  dma    0   $path1/c2h6nh.xyz"      >> $userinputfile
         echo "  dma    1   $path2/dmap.xyz"        >> $userinputfile
         ;;
  "eda") echo "  eda    0   $path2/eda_anti.xyz"     >> $userinputfile
         echo "  eda    0   $path2/eda_gauch.xyz"    >> $userinputfile
         echo "  eda    1   $path2/eda_Ha_anti.xyz"  >> $userinputfile
         echo "  eda    1   $path2/eda_Hb_anti.xyz"  >> $userinputfile
         echo "  eda    1   $path2/eda_Ha_gauch.xyz" >> $userinputfile
         echo "  eda    1   $path2/eda_Hb_gauch.xyz" >> $userinputfile
         echo "  eda    2   $path2/eda_H2_anti.xyz"  >> $userinputfile
         echo "  eda    2   $path2/eda_H2_gauch.xyz" >> $userinputfile
         ;;
  "co2"|"cd") echo "  cd     0   $path1/co2.xyz"         >> $userinputfile
              ;;
  "ch4"|"m") echo "  m      0   $path1/ch4.xyz"         >> $userinputfile
             ;;
  "buoh") echo "  buoh   0   $path3/BUTANOL/n-Buthanol-optimized.xyz" >> $userinputfile
          echo "  buoh   0   $path3/BUTANOL/GGg.xyz"                  >> $userinputfile
          echo "  buoh   0   $path3/BUTANOL/GGpg.xyz"                 >> $userinputfile
          echo "  buoh   0   $path3/BUTANOL/GGt.xyz"                  >> $userinputfile
          ;;
  "ar") echo  "  ar     0   $path1/ar.xyz"          >> $userinputfile
        ;;
  "he") echo  "  he     0   $path1/he.xyz"          >> $userinputfile
        ;;
  "cl") echo  "  cl    -1   $path1/cl.xyz"          >> $userinputfile
        ;;
  "na") echo  "  na     1   $path1/na.xyz"          >> $userinputfile
        ;;
  "ne") echo  "  ne     0   $path1/ne.xyz"          >> $userinputfile
        ;;
  "urea") echo   "  urea   0   $path1/urea.xyz"     >> $userinputfile
       ;;
  "h") echo   "  h      1   $path1/h.xyz"           >> $userinputfile
       ;;
  "tma") echo "  tma    0   $path2/tma.xyz"         >> $userinputfile
         echo "  tma    1   $path2/tmap.xyz"        >> $userinputfile
         ;;
  "hio3"|"ica") echo "  ica    0   $path2/hio3.xyz"       >> $userinputfile
                echo "  ica   -1   $path2/io3.xyz"         >> $userinputfile
                ;;
  "hio2"|"isa") echo "  isa    0   $path2/hio2.xyz"       >> $userinputfile
                ;;
  "i2o5"|"ip") echo "  ip     0   $path2/i2o5.xyz"       >> $userinputfile
               ;;
## EXPERIMENTAL
  "hom") echo "  hom    0   $path3/hom.xyz"         >> $userinputfile
         ;;
## XYZ
  "xyzbuoh") echo "  buoh   0   $path4/buoh-bonding.xyz" >> $userinputfile
             ;;
  "xyzh") echo "  h      1   $path4/h.xyz" >> $userinputfile
          ;;
  "xyzli") echo "  li     1   $path4/li.xyz" >> $userinputfile
           ;;
  "xyzna") echo "  na     1   $path4/na.xyz" >> $userinputfile
           ;;
  "xyzk") echo "  k      1   $path4/k.xyz" >> $userinputfile
          ;;
  "xyzf") echo "  f     -1   $path4/f.xyz" >> $userinputfile
          ;;
  "xyzcl") echo "  cl    -1   $path4/cl.xyz" >> $userinputfile
           ;;
  "xyzbr") echo "  br    -1   $path4/br.xyz" >> $userinputfile
           ;;
  "xyzi") echo "  i     -1   $path4/i.xyz" >> $userinputfile
          ;;
  "xyzaq") echo "  w     0   $path4/aq.xyz" >> $userinputfile
          ;;
  *) JKecho 0 "${cfRED}ERROR${cfDEF}: argument ${cfYELLOW}${what}${cfDEF} does not exist! ${cfRED}[EXITING]${cfDEF}"
     exit
     ;;
  esac
}

# go through all user arguments
JKecho 2 "checking user molecule-arguments: $arguments"
for iter in "${!arguments[@]}"
do
  i="${arguments[$iter]}"
  if [ "$i" == "-all" ]
  then
    add "W"

    add "HNO3"
    add "SA"
    add "MSA"
    add "FA"
    add "ACA"
    add "PYRU"
    add "CLA"
    add "PCLA"

    add "A"
    add "GD"
    add "DMA"
    add "TMA"
    add "urea"

    add "CO2"
    add "CH4"
    add "buoh"
    add "Ar"
    add "Ne"
    add "He"

    add "Cl"
    add "Na"

    add "HIO3"
    add "HIO2"
    add "I2O5"
    continue
  else
    add $i
  fi
done
if [ -z "$arguments" ]
then
  add "A"
  add "SA"
fi

# preparing command file
JKecho 2 "preparing $commandsfile"
echo """#sequence of typical commands for JKCS (Jammy Key for Configuration Sampling) 
JKCS1_prepare
JKCS2_explore -pop 300 -gen 200 -lm 1000 -JKQC
JKCS3_run -JKQC                
JKCS4_collect XTB -dip -JKQC           
JKCS5_filter resultsXTB.dat -c3 4 -rgm 3 -dm 3.5 -sm 80
JKCS3_run -p G16 -rf XTB -nf DFT_opt  -m \""# wb97xd 6-31++g** opt=verytight int=ultrafine gfinput IOP\(6\/7\=1\)"\"
JKCS4_collect DFT_opt       
JKCS5_filter resultsDFT_opt.dat -dm 1.7
JKCS3_run -p G16 -rf DFT_opt -nf DFT_freq -m \""# wb97xd 6-31++g** freq gfinput IOP\(6\/7\=1\)"\"
JKCS4_collect DFT_freq -gibbsh
JKCS5_filter  resultsDFT_freq.dat -c2 4 -d 1 """ > $commandsfile

JKecho 1 "File ${cfYELLOW}$userinputfile${cfDEF} has been copied to your directory."
nextscript=`ls $scriptpath/JKCS1*`
nextscript="${cfRED}J${cfGREEN}K${cfYELLOW}C${cfBLUE}S${cfDEF}"`echo ${nextscript##*/} | cut -c5-` 
JKecho 1 "Change it (e.g., with program vim) and then run ${nextscript}."
